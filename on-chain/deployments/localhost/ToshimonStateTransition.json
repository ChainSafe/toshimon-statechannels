{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_gameState_",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "moveA",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "moveB",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "randomSeed",
          "type": "bytes32"
        }
      ],
      "name": "advanceState",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "mainType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "secondaryType",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "baseStats",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "stats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "address[4]",
                      "name": "moves",
                      "type": "address[4]"
                    },
                    {
                      "internalType": "address",
                      "name": "statusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "stausConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "specialStatusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "specialStatusConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveIndex",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveCounter",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ToshimonState.MonsterCard[]",
                  "name": "monsters",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "defintion",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "used",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ToshimonState.ItemCard[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8",
                  "name": "activeMonsterIndex",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ToshimonState.PlayerState[2]",
              "name": "players",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct ToshimonState.GameState",
          "name": "gameState",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "moveA",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "moveB",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "randomSeed",
          "type": "bytes32"
        }
      ],
      "name": "advanceStateTyped",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "mainType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "secondaryType",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "baseStats",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "stats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "address[4]",
                      "name": "moves",
                      "type": "address[4]"
                    },
                    {
                      "internalType": "address",
                      "name": "statusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "stausConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "specialStatusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "specialStatusConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveIndex",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveCounter",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ToshimonState.MonsterCard[]",
                  "name": "monsters",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "defintion",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "used",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ToshimonState.ItemCard[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8",
                  "name": "activeMonsterIndex",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ToshimonState.PlayerState[2]",
              "name": "players",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct ToshimonState.GameState",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "playerIndex",
          "type": "uint8"
        }
      ],
      "name": "updateOutcomeFavourPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "destination",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allocationType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "metadata",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ExitFormat.Allocation[]",
                  "name": "allocations",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ExitFormat.SingleAssetExit[]",
              "name": "outcome",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "appData",
              "type": "bytes"
            },
            {
              "internalType": "uint48",
              "name": "turnNum",
              "type": "uint48"
            },
            {
              "internalType": "bool",
              "name": "isFinal",
              "type": "bool"
            }
          ],
          "internalType": "struct IForceMoveApp.VariablePart",
          "name": "prev",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "destination",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allocationType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "metadata",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ExitFormat.Allocation[]",
                  "name": "allocations",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ExitFormat.SingleAssetExit[]",
              "name": "outcome",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "appData",
              "type": "bytes"
            },
            {
              "internalType": "uint48",
              "name": "turnNum",
              "type": "uint48"
            },
            {
              "internalType": "bool",
              "name": "isFinal",
              "type": "bool"
            }
          ],
          "internalType": "struct IForceMoveApp.VariablePart",
          "name": "next",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "nParticipants",
          "type": "uint256"
        }
      ],
      "name": "validTransition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c087e86df2a6dbfcd3a00793b99b69199df98c658b19b784679437b24d8bd98",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2001157",
    "logsBloom": "0x
    "blockHash": "0xf3f6bafb24320dfa72b30781bb93220bc0062f45a4770eb9ac6229e0900a7397",
    "transactionHash": "0x5c087e86df2a6dbfcd3a00793b99b69199df98c658b19b784679437b24d8bd98",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2001157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3773c54f6e64fc0e9330e561268855b0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_gameState_\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"moveA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"moveB\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"randomSeed\",\"type\":\"bytes32\"}],\"name\":\"advanceState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mainType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondaryType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"baseStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"internalType\":\"address[4]\",\"name\":\"moves\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"statusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stausConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"specialStatusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"specialStatusConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveCounter\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.MonsterCard[]\",\"name\":\"monsters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defintion\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"internalType\":\"struct ToshimonState.ItemCard[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"activeMonsterIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.PlayerState[2]\",\"name\":\"players\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct ToshimonState.GameState\",\"name\":\"gameState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"moveA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"moveB\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"randomSeed\",\"type\":\"bytes32\"}],\"name\":\"advanceStateTyped\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mainType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondaryType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"baseStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"internalType\":\"address[4]\",\"name\":\"moves\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"statusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stausConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"specialStatusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"specialStatusConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveCounter\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.MonsterCard[]\",\"name\":\"monsters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defintion\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"internalType\":\"struct ToshimonState.ItemCard[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"activeMonsterIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.PlayerState[2]\",\"name\":\"players\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct ToshimonState.GameState\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"playerIndex\",\"type\":\"uint8\"}],\"name\":\"updateOutcomeFavourPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"appData\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"turnNum\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"internalType\":\"struct IForceMoveApp.VariablePart\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"appData\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"turnNum\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"internalType\":\"struct IForceMoveApp.VariablePart\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nParticipants\",\"type\":\"uint256\"}],\"name\":\"validTransition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"updateOutcomeFavourPlayer((address,bytes,(bytes32,uint256,uint8,bytes)[])[],uint8)\":{\"details\":\"Take an old outcome and update it to favour a given player       Assumes the outcome allocations can be indexed by the playerIndex\",\"params\":{\"outcome\":\"An outcome object to be rebalanced\",\"playerIndex\":\"Zero based index of the player to be assigned the favoured outcome\"},\"returns\":{\"_0\":\"The outcome resulting in a rebalance to the given player\"}},\"validTransition(((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),uint256)\":{\"details\":\"Override of IForceMove validTransition for the randomness protocol\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Toshimon/ToshimonStateTransition.sol\":\"ToshimonStateTransition\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@statechannels/exit-format/contracts/ExitFormat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n}\\n\\n// Ideally this would be imported from @connect/vector-withdraw-helpers\\n// And the interface would match this one (note WithdrawData calldata wd has become bytes calldata cD)\\ninterface WithdrawHelper {\\n    function execute(bytes calldata cD, uint256 actualAmount) external;\\n}\\n\\nlibrary ExitFormat {\\n    // An Exit is an array of SingleAssetExit (one for each asset)\\n    // Exit = SingleAssetExit[]\\n\\n    // A SingleAssetExit specifies\\n    // * an asset address (0 implies the native asset of the chain: on mainnet, this is ETH)\\n    // * custom metadata (optional field, can be zero bytes). This might specify how to transfer this particular asset (e.g. target an \\\"ERC20.transfer\\\"' method)\\n    // * an allocations array\\n    struct SingleAssetExit {\\n        address asset;\\n        bytes metadata;\\n        Allocation[] allocations;\\n    }\\n\\n    // allocations is an ordered array of Allocation.\\n    // The ordering is important, and may express e.g. a priority order for the exit\\n    // (which would make a material difference to the final state in the case of running out of gas or funds)\\n    // Allocations = Allocation[]\\n\\n    enum AllocationType {simple, withdrawHelper, guarantee}\\n\\n    // An Allocation specifies\\n    // * a destination, referring either to an ethereum address or an application-specific identifier\\n    // * an amount of asset\\n    // * an allocationType, which directs calling code on how to interpret the allocation\\n    // * custom metadata (optional field, can be zero bytes). This can be used flexibly by different protocols.\\n    struct Allocation {\\n        bytes32 destination;\\n        uint256 amount;\\n        uint8 allocationType;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * specifies the decoding format for metadata bytes fields\\n     * received with the WithdrawHelper flag\\n     */\\n    struct WithdrawHelperMetaData {\\n        address callTo;\\n        bytes callData;\\n    }\\n\\n    // We use underscore parentheses to denote an _encodedVariable_\\n    function encodeExit(SingleAssetExit[] memory exit)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(exit);\\n    }\\n\\n    function decodeExit(bytes memory _exit_)\\n        internal\\n        pure\\n        returns (SingleAssetExit[] memory)\\n    {\\n        return abi.decode(_exit_, (SingleAssetExit[]));\\n    }\\n\\n    function encodeAllocation(Allocation memory allocation)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(allocation);\\n    }\\n\\n    function decodeAllocation(bytes memory _allocation_)\\n        internal\\n        pure\\n        returns (Allocation memory)\\n    {\\n        return abi.decode(_allocation_, (Allocation));\\n    }\\n\\n    function exitsEqual(\\n        SingleAssetExit[] memory exitA,\\n        SingleAssetExit[] memory exitB\\n    ) internal pure returns (bool) {\\n        return _bytesEqual(encodeExit(exitA), encodeExit(exitB));\\n    }\\n\\n    /**\\n     * @notice Executes an exit by paying out assets and calling external contracts\\n     * @dev Executes an exit by paying out assets and calling external contracts\\n     * @param exit The exit to be paid out.\\n     */\\n    function executeExit(ExitFormat.SingleAssetExit[] memory exit) internal {\\n        for (uint256 assetIndex = 0; assetIndex < exit.length; assetIndex++) {\\n            executeSingleAssetExit(exit[assetIndex]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a single asset exit by paying out the asset and calling external contracts\\n     * @dev Executes a single asset exit by paying out the asset and calling external contracts\\n     * @param singleAssetExit The single asset exit to be paid out.\\n     */\\n    function executeSingleAssetExit(\\n        ExitFormat.SingleAssetExit memory singleAssetExit\\n    ) internal {\\n        address asset = singleAssetExit.asset;\\n        for (uint256 j = 0; j < singleAssetExit.allocations.length; j++) {\\n            require(\\n                _isAddress(singleAssetExit.allocations[j].destination),\\n                \\\"Destination is not a zero-padded address\\\"\\n            );\\n            address payable destination =\\n                payable(\\n                    address(\\n                        uint160(\\n                            uint256(singleAssetExit.allocations[j].destination)\\n                        )\\n                    )\\n                );\\n            uint256 amount = singleAssetExit.allocations[j].amount;\\n            if (asset == address(0)) {\\n                (bool success, ) = destination.call{value: amount}(\\\"\\\"); //solhint-disable-line avoid-low-level-calls\\n                require(success, \\\"Could not transfer ETH\\\");\\n            } else {\\n                // TODO support other token types via the singleAssetExit.metadata field\\n                ERC20Interface(asset).transfer(destination, amount);\\n            }\\n            if (\\n                singleAssetExit.allocations[j].allocationType ==\\n                uint8(AllocationType.withdrawHelper)\\n            ) {\\n                WithdrawHelperMetaData memory wd =\\n                    _parseWithdrawHelper(\\n                        singleAssetExit.allocations[j].metadata\\n                    );\\n                WithdrawHelper(wd.callTo).execute(wd.callData, amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether given destination is a valid Ethereum address\\n     * @dev Checks whether given destination is a valid Ethereum address\\n     * @param destination the destination to be checked\\n     */\\n    function _isAddress(bytes32 destination) internal pure returns (bool) {\\n        return uint96(bytes12(destination)) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns a callTo address and callData from metadata bytes\\n     * @dev Returns a callTo address and callData from metadata bytes\\n     */\\n    function _parseWithdrawHelper(bytes memory metadata)\\n        internal\\n        pure\\n        returns (WithdrawHelperMetaData memory)\\n    {\\n        return abi.decode(metadata, (WithdrawHelperMetaData));\\n    }\\n\\n    /**\\n     * @notice Check for equality of two byte strings\\n     * @dev Check for equality of two byte strings\\n     * @param _preBytes One bytes string\\n     * @param _postBytes The other bytes string\\n     * @return true if the bytes are identical, false otherwise.\\n     */\\n    function _bytesEqual(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // copied from https://www.npmjs.com/package/solidity-bytes-utils/v/0.1.1\\n        bool success = true;\\n\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n        /* solhint-disable no-inline-assembly */\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xb2d09e91c8f0496adba9701a81c900b25b78766a7a6ef23df4acb2f79de86e2e\",\"license\":\"MIT\"},\"contracts/CommitReveal/CommitRevealApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Created on 2022-06-02 12:37\\n * @summary: An abstract contract for implementing a ForceMove application with shared randomness\\n * @author: Willem Olding (ChainSafe)\\n */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '../StateChannel/interfaces/IForceMoveApp.sol';\\nimport {ExitFormat as Outcome} from '@statechannels/exit-format/contracts/ExitFormat.sol';\\n\\nabstract contract CommitRevealApp is IForceMoveApp {\\n\\n    // player indices\\n    uint8 constant A = 0;\\n    uint8 constant B = 1;\\n\\n    // The phases of the protocol\\n    enum Phase { A_COMMIT, B_COMMIT, A_REVEAL, B_REVEAL }\\n\\n    // Data that must be included in each reveal phase state update\\n    struct Reveal {\\n        uint8 move;\\n        bytes32 seed;\\n    }\\n\\n    // Application specific data for the ForceMove app\\n    // This itself contains game specific data\\n    struct AppData {\\n        bytes32 preCommitA;\\n        bytes32 preCommitB;\\n\\n        Reveal revealA;\\n        Reveal revealB;\\n\\n        bytes gameState;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Takes a game state and outcome and mutates it using a move from each player\\n     *      collaboratively produced randomness\\n     * @param gameState The prior game state to be mutated and returned\\n     * @param outcome The prior outcome that can be mutated and returned\\n     * @param moveA Move from player A\\n     * @param moveB Move from player B\\n     * @param randomSeed The combined random seed produced by the protocol \\n     * @return The outcome resulting in a rebalance to the given player\\n     */\\n    function advanceState(\\n        bytes memory gameState,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n    ) virtual public pure returns (bytes memory, Outcome.SingleAssetExit[] memory, bool);\\n\\n    /**\\n     * @dev Take an old outcome and update it to favour a given player\\n     *       Assumes the outcome allocations can be indexed by the playerIndex\\n     * @param outcome An outcome object to be rebalanced\\n     * @param playerIndex Zero based index of the player to be assigned the favoured outcome\\n     * @return The outcome resulting in a rebalance to the given player\\n     */\\n    function updateOutcomeFavourPlayer(\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 playerIndex\\n    ) virtual public pure returns (Outcome.SingleAssetExit[] memory);\\n\\n\\n    /**\\n     * @notice Decodes the appData.\\n     * @dev Decodes the appData.\\n     * @param appDataBytes The abi.encode of an AppData struct describing the application-specific data.\\n     * @return A AppData struct containing the application-specific data.\\n     */\\n    function _appData(bytes memory appDataBytes) internal pure returns (AppData memory) {\\n        return abi.decode(appDataBytes, (AppData));\\n    }\\n\\n    /**\\n     * @notice Combines two pieces of randomness to produce a single random seed\\n     * @dev Combines two pieces of randomness to produce a single random seed\\n     * @param partSeedA A random value\\n     * @param partSeedB A random value\\n     * @return A random seed from the combined randomness\\n     */\\n    function _mergeSeeds(bytes32 partSeedA, bytes32 partSeedB) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(partSeedA, partSeedB));\\n    }\\n\\n    // helper to do byte array comparison\\n    // can replace with a more efficient version later\\n    function _compareBytes(bytes memory a, bytes memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    // helper to do byte array comparison\\n    function _compareReveals(Reveal memory a, Reveal memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encode((a))) == keccak256(abi.encode((b))));\\n    }\\n\\n    // helper to do byte array comparison\\n    function _compareOutcomes(Outcome.SingleAssetExit[] memory a, Outcome.SingleAssetExit[] memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encode((a))) == keccak256(abi.encode((b))));\\n    }\\n\\n    /**\\n     * @dev Get the current phase given the turn number\\n     * @param turnNum The current sequence/turn number\\n     * @return Phase\\n     */\\n    function _phase(uint48 turnNum) internal pure returns (Phase) {\\n\\n        // The first 4 turnNums (0,1,2,3) are used for the pre-fund and post-fund setup phase\\n        // This function will be called at all with those turnNums.\\n        // Coincidentally this is a multiple of the number of phases in CommitReveal so there \\n        // is no need to adjust.\\n        \\n        // This conversion is safe as the modulo is always < 4\\n        return Phase(turnNum % 4);\\n    }\\n\\n    /**\\n     * @dev Override of IForceMove validTransition for the randomness protocol\\n     */\\n    function validTransition(\\n        VariablePart memory prev,\\n        VariablePart memory next,\\n        uint256 nParticipants\\n    ) public pure override returns (bool) {\\n        require(nParticipants == 2, \\\"Only two participant commit/reveal games are supported\\\");\\n\\n        // we are in the commit/reveal cycle of gameplay\\n        Phase phase = _phase(next.turnNum);\\n\\n        AppData memory prevData = _appData(prev.appData);\\n        AppData memory nextData = _appData(next.appData);\\n\\n        if        (phase == Phase.A_COMMIT) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [A commitment] move\\\");\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, A)));\\n        } else if (phase == Phase.B_COMMIT) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [B commitment] move\\\");\\n            require(prevData.preCommitA == nextData.preCommitA, \\\"Cannot mutate A's preCommit in [B commitment] move\\\");\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, B)));\\n        } else if (phase == Phase.A_REVEAL) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [A reveal] move\\\");\\n            // require(prevData.preCommitA == nextData.preCommitA, \\\"Cannot mutate A's preCommit in [A reveal] move\\\");\\n            require(prevData.preCommitB == nextData.preCommitB, \\\"Cannot mutate B's preCommit in [A reveal] move\\\");\\n            // reveal matches preCommit\\n            require(prevData.preCommitA ==  keccak256(abi.encode(nextData.revealA)));\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, A)));\\n        } else if (phase == Phase.B_REVEAL) {\\n            // reveal matches preCommit\\n            require(prevData.preCommitB == keccak256(abi.encode(nextData.revealB)));\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, B)));\\n            // game state update is made correctly with respect to the committed moves and random seeds\\n            bytes32 randomSeed = _mergeSeeds(nextData.revealA.seed, nextData.revealB.seed);\\n            (bytes memory newState,, bool isFinal) = advanceState(prevData.gameState, prev.outcome, nextData.revealA.move, nextData.revealB.move, randomSeed);\\n            require(\\n                _compareBytes(\\n                    newState,\\n                    nextData.gameState\\n                ), \\\"New state must be computed based on preCommit moves in [B reveal] move\\\"\\n            );\\n            // if the game state concluded this must be reflected in the variable part of the channel state\\n            require(isFinal == next.isFinal);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x5ee1152dd88092ffe3f4db06fe095ec84277a01d7edc1483208ee9a65b5483be\",\"license\":\"MIT\"},\"contracts/StateChannel/interfaces/IForceMoveApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ExitFormat as Outcome} from '@statechannels/exit-format/contracts/ExitFormat.sol';\\n\\n/**\\n * @dev The IForceMoveApp interface calls for its children to implement an application-specific validTransition function, defining the state machine of a ForceMove state channel DApp.\\n */\\ninterface IForceMoveApp {\\n    struct VariablePart {\\n        Outcome.SingleAssetExit[] outcome;\\n        bytes appData;\\n        uint48 turnNum;\\n        bool isFinal;\\n    }\\n\\n    /**\\n     * @notice Encodes application-specific rules for a particular ForceMove-compliant state channel.\\n     * @dev Encodes application-specific rules for a particular ForceMove-compliant state channel.\\n     * @param a State being transitioned from.\\n     * @param b State being transitioned to.\\n     * @param nParticipants Number of participants in this state channel.\\n     * @return true if the transition conforms to this application's rules, false otherwise\\n     */\\n    function validTransition(\\n        VariablePart calldata a,\\n        VariablePart calldata b,\\n        uint256 nParticipants\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xa4c7f59e310a4aa1ac388ab9b5272c1ef86e959d44615bb8c9f764c1752b2c13\",\"license\":\"MIT\"},\"contracts/Toshimon/ToshimonState.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2022-06-06\\n * @summary: Types for representing the toshimon game state\\n * @author: Willem Olding (ChainSafe)\\n */\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nlibrary ToshimonState {\\n\\n\\tstruct GameState {\\n\\t\\tPlayerState[2] players;\\n\\t}\\n\\n\\tstruct PlayerState {\\n\\t\\tMonsterCard[] monsters;\\n\\t\\tItemCard[] items;\\n\\t\\tuint8 activeMonsterIndex;\\n\\t}\\n\\n\\tstruct MonsterCard {\\n\\t\\tuint256 cardId;\\n\\t\\tuint8 mainType;\\n\\t\\tuint8 secondaryType;\\n\\t\\tStats baseStats;\\n\\t\\tStats stats;\\n\\t\\taddress[4] moves;\\n\\t\\taddress statusCondition;\\n\\t\\tuint8 stausConditionCounter;\\n\\t\\taddress specialStatusCondition;\\n\\t\\tuint8 specialStatusConditionCounter;\\n\\t\\tuint8 activeMoveIndex;\\n\\t\\tuint8 activeMoveCounter;\\n\\t}\\n\\n\\tstruct Stats {\\n\\t\\tuint8 hp;\\n\\t\\tuint8 attack;\\n\\t\\tuint8 defense;\\n\\t\\tuint8 spAttack;\\n\\t\\tuint8 spDefense;\\n\\t\\tuint8 speed;\\n\\t\\tuint8[4] pp;\\n\\t}\\n\\n\\tstruct ItemCard {\\n\\t\\tuint256 cardId;\\n\\t\\taddress defintion;\\n\\t\\tbool used;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5ed2c739c8d21473d0fa242c3f96ad6acf53dbe7431f74252db5e469d3233073\",\"license\":\"UNLICENSED\"},\"contracts/Toshimon/ToshimonStateTransition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Created on 2022-06-23 12:37\\n * @summary: The state transition function that captures all the rules of the Toshimon battle game\\n * @author: Willem Olding (ChainSafe)\\n */\\n pragma solidity 0.7.6;\\n pragma experimental ABIEncoderV2;\\n\\n import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n import '../CommitReveal/CommitRevealApp.sol';\\n import { ToshimonState as TM } from './ToshimonState.sol';\\n import './interfaces/IMove.sol';\\n\\n\\n contract ToshimonStateTransition is CommitRevealApp {\\n\\n    function advanceState(\\n        bytes memory _gameState_,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n        ) public pure override returns (bytes memory, Outcome.SingleAssetExit[] memory, bool) {\\n        TM.GameState memory gameState = abi.decode(_gameState_, (TM.GameState));\\n        (TM.GameState memory newState,  Outcome.SingleAssetExit[] memory newOutcome, bool isFinal) = advanceStateTyped(gameState, outcome, moveA, moveB, randomSeed);\\n        return (abi.encode(newState), newOutcome, isFinal);\\n    }\\n\\n    function advanceStateTyped(\\n        TM.GameState memory gameState,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n        ) public pure returns (TM.GameState memory, Outcome.SingleAssetExit[] memory, bool) {\\n\\n\\n        // // if either player is unconcious then no more moves can be made\\n        // // and the game is over. No further state updates possible.\\n        // if (_is_unconcious(gameState.players[0]) || _is_unconcious(gameState.players[1])) {\\n        //     return (gameState, outcome, true);\\n        // }\\n        \\n        // first up resolve any switch monster actions\\n        // These occur first and order between players doesn't matter\\n        if ( _isSwapAction(moveA) ) {\\n            gameState.players[0].activeMonsterIndex = moveA - 4;\\n        }\\n        if ( _isSwapAction(moveB) ) {\\n            gameState.players[1].activeMonsterIndex = moveB - 4;\\n        }\\n\\n        // // next up resolve attacks. Speed should be used to resolve\\n        // // if both players are attackign but here A always goes first\\n        // // for demo purposes\\n        // if ( _isMoveAction(moveA) ) {\\n        //     gameState = _makeMove(gameState, moveA,  0, randomSeed);\\n        // }\\n        // if ( _isMoveAction(moveB) ) {\\n        //     gameState = _makeMove(gameState, moveB,  1, randomSeed);\\n        // }\\n\\n        return (gameState, outcome, true);\\n\\n    }\\n\\n    // For incentive reasons it needs to ensure that each time a player makes\\n    // a state update they set themselves as the winning player\\n    // unless the game forces otherwise via a conclusion\\n    // \\n    // The entire balance is reallocated to the winning player index by this function\\n    // \\n    // This assumes the outcome is ordered according to the players.\\n    function updateOutcomeFavourPlayer(\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 playerIndex\\n        ) override public pure returns (Outcome.SingleAssetExit[] memory) {\\n        Outcome.SingleAssetExit memory wagerAssetExit = outcome[0];\\n        uint256 total = wagerAssetExit.allocations[0].amount + wagerAssetExit.allocations[1].amount;\\n\\n        outcome[0].allocations[playerIndex].amount = total;\\n        outcome[0].allocations[~playerIndex].amount = 0;\\n\\n        return (outcome);\\n    }\\n\\n    // A player is unconcious if all their monsters have HP == 0\\n    function _is_unconcious(TM.PlayerState memory playerState) pure internal returns (bool) {\\n        bool alive = false;\\n        for (uint8 i = 0; i < playerState.monsters.length; i++) {\\n            if (playerState.monsters[i].stats.hp > 0) {\\n                alive = true;\\n            }\\n        }\\n        return (alive);\\n    }\\n\\n    function _isSwapAction(uint8 move) pure internal returns (bool) {\\n        return (move >=4 && move <=8);\\n    }\\n\\n    function _isMoveAction(uint8 move) pure internal returns (bool) {\\n        return (move < 4);\\n    }\\n\\n    function _makeMove(TM.GameState memory gameState, uint8 moveIndex, uint8 mover, bytes32 randomSeed) pure internal returns (TM.GameState memory) {\\n        TM.MonsterCard memory attacker = _getActiveMonster(gameState.players[mover]);\\n        TM.MonsterCard memory defender = _getActiveMonster(gameState.players[~mover]);\\n\\n        // bail if attacker is unconcious or no PP available\\n        if (attacker.stats.hp == 0) {\\n            return gameState;\\n        }\\n        if (attacker.stats.pp[moveIndex] == 0) {\\n            return gameState;\\n        }        \\n\\n        // reduce the PP of the attacker on that move\\n        attacker.stats.pp[moveIndex] -= 1;\\n\\n        // apply move\\n        // This can fail, calling code must catch errors\\n        gameState = IMove(attacker.moves[moveIndex]).applyMove(gameState, mover, randomSeed);\\n\\n        return gameState;\\n\\n    }\\n\\n    function _getActiveMonster(TM.PlayerState memory playerState) pure internal returns (TM.MonsterCard memory) {\\n        return (playerState.monsters[playerState.activeMonsterIndex]);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x487ad427fcfb0ae299c4a660674768b2ecd7fdf597305dc113253d7c82b6612c\",\"license\":\"MIT\"},\"contracts/Toshimon/interfaces/IMove.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { ToshimonState as TM } from '../ToshimonState.sol';\\n\\ninterface IMove {\\n\\tfunction applyMove(TM.GameState memory state, uint8 mover, bytes32 randomSeed) external pure returns (TM.GameState memory);\\n}\\n\",\"keccak256\":\"0x0ebc99629a89e0f37948e0e20bb353c8287cbc5464c8dcf24afd53c08ac50cbe\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063215158ec146100515780632934b2e41461007a5780634e42d6e01461009a578063bd413823146100bc575b600080fd5b61006461005f366004611546565b6100de565b6040516100719190612080565b60405180910390f35b61008d6100883660046116fb565b6101b6565b6040516100719190612091565b6100ad6100a83660046116a4565b61049e565b6040516100719392919061216f565b6100cf6100ca366004611597565b6104fd565b604051610071939291906120ba565b60606000836000815181106100ef57fe5b602002602001015190506000816040015160018151811061010c57fe5b602002602001015160200151826040015160008151811061012957fe5b602002602001015160200151019050808560008151811061014657fe5b6020026020010151604001518560ff168151811061016057fe5b6020026020010151602001818152505060008560008151811061017f57fe5b602002602001015160400151851960ff168151811061019a57fe5b6020026020010151602001818152505084925050505b92915050565b6000816002146101e15760405162461bcd60e51b81526004016101d89061212e565b60405180910390fd5b60006101f08460400151610563565b905060006102018660200151610574565b905060006102128660200151610574565b9050600083600381111561022257fe5b141561027d5761023a82608001518260800151610590565b6102565760405162461bcd60e51b81526004016101d89061214e565b8551875161026f919061026a9060006100de565b6105e9565b61027857600080fd5b61048f565b600183600381111561028b57fe5b14156102f4576102a382608001518260800151610590565b6102bf5760405162461bcd60e51b81526004016101d89061211e565b80518251146102e05760405162461bcd60e51b81526004016101d8906120fe565b8551875161026f919061026a9060016100de565b600283600381111561030257fe5b14156103975761031a82608001518260800151610590565b6103365760405162461bcd60e51b81526004016101d89061213e565b806020015182602001511461035d5760405162461bcd60e51b81526004016101d8906120ee565b80604001516040516020016103729190612180565b6040516020818303038152906040528051906020012082600001511461025657600080fd5b60038360038111156103a557fe5b141561048f5780606001516040516020016103c09190612180565b604051602081830303815290604052805190602001208260200151146103e557600080fd5b855187516103f9919061026a9060016100de565b61040257600080fd5b600061041e826040015160200151836060015160200151610623565b905060008061044885608001518b60000151866040015160000151876060015160000151876104fd565b925050915061045b828560800151610590565b6104775760405162461bcd60e51b81526004016101d89061210e565b886060015115158115151461048b57600080fd5b5050505b600193505050505b9392505050565b6104a6610674565b606060006104b386610656565b156104ca5787515160ff6003198801166040909101525b6104d385610656565b156104ed5787516020015160ff6003198701166040909101525b5095969495506001949350505050565b60608060008088806020019051810190610517919061166f565b9050600080600061052b848c8c8c8c61049e565b92509250925082604051602001610542919061215e565b60408051808303601f190181529190529c919b509950975050505050505050565b60006003808316908111156101b057fe5b61057c61068c565b818060200190518101906101b0919061163a565b6000816040516020016105a39190612074565b60405160208183030381529060405280519060200120836040516020016105ca9190612074565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016105fc9190612080565b60405160208183030381529060405280519060200120836040516020016105ca9190612080565b6000828260405160200161063892919061209f565b60405160208183030381529060405280519060200120905092915050565b600060048260ff16101580156101b0575050600860ff909116111590565b60405180602001604052806106876106c5565b905290565b6040805160a081018252600080825260208201529081016106ab6106f2565b81526020016106b86106f2565b8152602001606081525090565b60405180604001604052806002905b6106dc610709565b8152602001906001900390816106d45790505090565b604080518082019091526000808252602082015290565b60405180606001604052806060815260200160608152602001600060ff1681525090565b600061074061073b846121b8565b61218e565b9050808285602086028501111561075657600080fd5b60005b858110156107805761076b8783610b4a565b83526020928301929190910190600101610759565b5050509392505050565b600061079861073b846121b8565b905080828560208602850111156107ae57600080fd5b60005b85811015610780576107c38783610b55565b835260209283019291909101906001016107b1565b60006107e661073b846121d9565b8381529050602081018260005b8581101561078057813585016108098882610d42565b84525060209283019291909101906001016107f3565b600061082d61073b846121d9565b8381529050602081018260608502810186101561084957600080fd5b60005b858110156107805761085e8783610ee5565b83526020909201916060919091019060010161084c565b600061088361073b846121d9565b8381529050602081018260608502810186101561089f57600080fd5b60005b85811015610780576108b48783610f3c565b8352602090920191606091909101906001016108a2565b60006108d961073b846121d9565b83815290506020810182610420850281018610156108f657600080fd5b60005b858110156107805761090b8783610f89565b835260209092019161042091909101906001016108f9565b600061093161073b846121d9565b838152905060208101826104208502810186101561094e57600080fd5b60005b858110156107805761096387836110a0565b83526020909201916104209190910190600101610951565b600061098961073b846121b8565b9050808260005b8581101561078057813585016109a688826111aa565b8452506020928301929190910190600101610990565b60006109ca61073b846121b8565b9050808260005b8581101561078057815185016109e78882611227565b84525060209283019291909101906001016109d1565b6000610a0b61073b846121d9565b8381529050602081018260005b858110156107805781358501610a2e88826112e0565b8452506020928301929190910190600101610a18565b6000610a5261073b846121b8565b90508082856020860285011115610a6857600080fd5b60005b8581101561078057610a7d8783611530565b83526020928301929190910190600101610a6b565b6000610aa061073b846121b8565b90508082856020860285011115610ab657600080fd5b60005b8581101561078057610acb878361153b565b83526020928301929190910190600101610ab9565b6000610aee61073b846121fd565b905082815260208101848484011115610b0657600080fd5b610b11848285612289565b509392505050565b6000610b2761073b846121fd565b905082815260208101848484011115610b3f57600080fd5b610b11848285612295565b80356101b0816122d1565b80516101b0816122d1565b600082601f830112610b70578081fd5b6004610b7d84828561072d565b949350505050565b600082601f830112610b95578081fd5b6004610b7d84828561078a565b600082601f830112610bb2578081fd5b8135610b7d8482602086016107d8565b600082601f830112610bd2578081fd5b8135610b7d84826020860161081f565b600082601f830112610bf2578081fd5b8151610b7d848260208601610875565b600082601f830112610c12578081fd5b8135610b7d8482602086016108cb565b600082601f830112610c32578081fd5b8151610b7d848260208601610923565b600082601f830112610c52578081fd5b6002610b7d84828561097b565b600082601f830112610c6f578081fd5b6002610b7d8482856109bc565b600082601f830112610c8c578081fd5b8135610b7d8482602086016109fd565b600082601f830112610cac578081fd5b6004610b7d848285610a44565b600082601f830112610cc9578081fd5b6004610b7d848285610a92565b80356101b0816122e8565b80516101b0816122e8565b80356101b0816122f1565b80516101b0816122f1565b600082601f830112610d12578081fd5b8135610b7d848260208601610ae0565b600082601f830112610d32578081fd5b8151610b7d848260208601610b19565b600060808284031215610d53578081fd5b610d5d608061218e565b90506000610d6b8484610cec565b818301526020610d7d85828601610cec565b908301526040610d8f85858301611530565b90830152606083013567ffffffffffffffff811115610dac578182fd5b610db885828601610d02565b6060840152505092915050565b600060e08284031215610dd6578081fd5b610de060a061218e565b90506000610dee8484610cf7565b818301526020610e0085828601610cf7565b908301526040610e12858583016112a5565b908301526080610e24858583016112a5565b606084015260c084015167ffffffffffffffff811115610e42578283fd5b610e4e86828701610d22565b8285015250505092915050565b600060208284031215610e6c578081fd5b610e76602061218e565b9050813567ffffffffffffffff811115610e8f57600080fd5b610e9b84828501610c42565b82525092915050565b600060208284031215610eb5578081fd5b610ebf602061218e565b825190915067ffffffffffffffff811115610ed957600080fd5b610e9b84828501610c5f565b600060608284031215610ef6578081fd5b610f00606061218e565b90506000610f0e8484610cec565b908201526020610f2084848301610b4a565b908201526040610f3284848301610cd6565b9082015292915050565b600060608284031215610f4d578081fd5b610f57606061218e565b90506000610f658484610cf7565b908201526020610f7784848301610b55565b908201526040610f3284848301610ce1565b60006104208284031215610f9b578081fd5b610fa661018061218e565b90506000610fb48484610cec565b908201526020610fc684848301611530565b908201526040610fd884848301611530565b908201526060610fea8484830161136a565b908201526101a0610ffd8484830161136a565b6080830152506102e061101284828501610b60565b60a08301525061036061102784828501610b4a565b60c08301525061038061103c84828501611530565b60e0830152506103a061105184828501610b4a565b610100830152506103c061106784828501611530565b610120830152506103e061107d84828501611530565b6101408301525061040061109384828501611530565b6101608301525092915050565b600061042082840312156110b2578081fd5b6110bd61018061218e565b905060006110cb8484610cf7565b9082015260206110dd8484830161153b565b9082015260406110ef8484830161153b565b90820152606061110184848301611400565b908201526101a061111484848301611400565b6080830152506102e061112984828501610b85565b60a08301525061036061113e84828501610b55565b60c0830152506103806111538482850161153b565b60e0830152506103a061116884828501610b55565b610100830152506103c061117e8482850161153b565b610120830152506103e06111948482850161153b565b610140830152506104006110938482850161153b565b6000606082840312156111bb578081fd5b6111c5606061218e565b9050813567ffffffffffffffff8111156111de57600080fd5b6111ea84828501610c02565b825250602082013567ffffffffffffffff81111561120757600080fd5b61121384828501610bc2565b6020830152506040610f3284828501611530565b600060608284031215611238578081fd5b611242606061218e565b825190915067ffffffffffffffff81111561125c57600080fd5b61126884828501610c22565b825250602082015167ffffffffffffffff81111561128557600080fd5b61129184828501610be2565b6020830152506040610f328482850161153b565b6000604082840312156112b6578081fd5b6112c0604061218e565b905060006112ce848461153b565b908201526020610f3284848301610cf7565b6000606082840312156112f1578081fd5b6112fb606061218e565b905060006113098484610b4a565b81830152602083013567ffffffffffffffff811115611326578182fd5b61133285828601610d02565b602084015250604083013567ffffffffffffffff811115611351578182fd5b61135d85828601610ba2565b6040840152505092915050565b6000610140828403121561137c578081fd5b61138660e061218e565b905060006113948484611530565b9082015260206113a684848301611530565b9082015260406113b884848301611530565b9082015260606113ca84848301611530565b9082015260806113dc84848301611530565b9082015260a06113ee84848301611530565b9082015260c0610f3284848301610c9c565b60006101408284031215611412578081fd5b61141c60e061218e565b9050600061142a848461153b565b90820152602061143c8484830161153b565b90820152604061144e8484830161153b565b9082015260606114608484830161153b565b9082015260806114728484830161153b565b9082015260a06114848484830161153b565b9082015260c0610f3284848301610cb9565b6000608082840312156114a7578081fd5b6114b1608061218e565b9050813567ffffffffffffffff8111156114ca57600080fd5b6114d684828501610c7c565b825250602082013567ffffffffffffffff8111156114f357600080fd5b6114ff84828501610d02565b602083015250604061151384828501611525565b908201526060610f3284848301610cd6565b80356101b0816122fa565b80356101b081612303565b80516101b081612303565b60008060408385031215611558578182fd5b8183013567ffffffffffffffff811115611570578283fd5b61157c85828601610c7c565b925050602061158d85828601611530565b9150509250929050565b600080600080600060a086880312156115ae578081fd5b8086013567ffffffffffffffff8111156115c6578182fd5b6115d288828901610d02565b955050602086013567ffffffffffffffff8111156115ee578182fd5b6115fa88828901610c7c565b945050604061160b88828901611530565b935050606061161c88828901611530565b925050608061162d88828901610cec565b9150509295509295909350565b60006020828403121561164b578081fd5b8082015167ffffffffffffffff811115611663578182fd5b610b7d84828501610dc5565b600060208284031215611680578081fd5b8082015167ffffffffffffffff811115611698578182fd5b610b7d84828501610ea4565b600080600080600060a086880312156116bb578283fd5b8286013567ffffffffffffffff8111156116d3578384fd5b6116df88828901610e5b565b955050602086013567ffffffffffffffff8111156115ee578384fd5b60008060006060848603121561170f578081fd5b8084013567ffffffffffffffff811115611727578182fd5b61173386828701611496565b935050602084013567ffffffffffffffff81111561174f578182fd5b61175b86828701611496565b925050604061176c86828701610cec565b9150509250925092565b600061178283836117e3565b505060200190565b60006104978383611dae565b60006117a28383611e21565b505060600190565b60006117b68383611e58565b50506104200190565b60006104978383611f41565b60006104978383611fa7565b6000611782838361206b565b6117ec8161224f565b82525050565b6117fb81612231565b6118058184612241565b925061181082612228565b60005b8281101561183d5781516118278682611776565b9550506118338261222b565b9150600101611813565b5050505050565b600061184f82612237565b6118598185612246565b93508360208202850161186b8561222b565b845b848110156118a35783830388528151611886848261178a565b9350506118928261222b565b60209890980197915060010161186d565b50909695505050505050565b60006118ba82612237565b6118c48185612246565b93506118cf8361222b565b825b828110156118fb5781516118e58782611796565b9650506118f18261222b565b91506001016118d1565b5093949350505050565b600061191082612237565b61191a8185612246565b93506119258361222b565b825b828110156118fb57815161193b87826117aa565b9650506119478261222b565b9150600101611927565b600061195c8261223b565b6119668185612241565b93508360208202850161197885612228565b845b848110156118a3578383038852815161199384826117bf565b93505061199f8261222b565b60209890980197915060010161197a565b60006119bb82612237565b6119c58185612246565b9350836020820285016119d78561222b565b845b848110156118a357838303885281516119f284826117cb565b9350506119fe8261222b565b6020989098019791506001016119d9565b611a1881612231565b611a228184612241565b9250611a2d82612228565b60005b8281101561183d578151611a4486826117d7565b955050611a508261222b565b9150600101611a30565b6117ec8161225a565b6117ec81612228565b6000611a7782612237565b611a818185612246565b9350611a91818560208601612295565b611a9a816122c7565b9093019392505050565b6000611aaf82612237565b611ab98185612241565b9350611ac9818560208601612295565b9290920192915050565b6000611ae0602e83612246565b7f43616e6e6f74206d75746174652042277320707265436f6d6d697420696e205b918101919091527f412072657665616c5d206d6f76650000000000000000000000000000000000006020820152604001919050565b6000611b43603283612246565b7f43616e6e6f74206d75746174652041277320707265436f6d6d697420696e205b918101919091527f4220636f6d6d69746d656e745d206d6f766500000000000000000000000000006020820152604001919050565b6000611ba6604683612246565b7f4e6577207374617465206d75737420626520636f6d7075746564206261736564918101919091527f206f6e20707265436f6d6d6974206d6f76657320696e205b422072657665616c60208201527f5d206d6f766500000000000000000000000000000000000000000000000000006040820152606001919050565b6000611c2f603383612246565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4220636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b6000611c92603683612246565b7f4f6e6c792074776f207061727469636970616e7420636f6d6d69742f72657665918101919091527f616c2067616d65732061726520737570706f72746564000000000000000000006020820152604001919050565b6000611cf5602f83612246565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b412072657665616c5d206d6f766500000000000000000000000000000000006020820152604001919050565b6000611d58603383612246565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4120636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b80516000906080840190611dc28582611a63565b506020830151611dd56020860182611a63565b506040830151611de8604086018261206b565b5060608301518482036060860152611e008282611a6c565b95945050505050565b8051602080845260009190840190611e008282611951565b8051611e2d8382611a63565b506020810151611e4060208401826117e3565b506040810151611e536040840182611a5a565b505050565b8051611e648382611a63565b506020810151611e77602084018261206b565b506040810151611e8a604084018261206b565b506060810151611e9d6060840182611fed565b506080810151611eb16101a0840182611fed565b5060a0810151611ec56102e08401826117f2565b5060c0810151611ed96103608401826117e3565b5060e0810151611eed61038084018261206b565b50610100810151611f026103a08401826117e3565b50610120810151611f176103c084018261206b565b50610140810151611f2c6103e084018261206b565b50610160810151611e5361040084018261206b565b8051606080845260009190840190611f598282611905565b91505060208301518482036020860152611f7382826118af565b9150506040830151610b11604086018261206b565b8051611f94838261206b565b506020810151611e536020840182611a63565b80516000906060840190611fbb85826117e3565b5060208301518482036020860152611fd38282611a6c565b91505060408301518482036040860152611e008282611844565b8051611ff9838261206b565b50602081015161200c602084018261206b565b50604081015161201f604084018261206b565b506060810151612032606084018261206b565b506080810151612045608084018261206b565b5060a081015161205860a084018261206b565b5060c0810151611e5360c0840182611a0f565b6117ec81612283565b60006104978284611aa4565b6020808252810161049781846119b0565b602081016101b08284611a5a565b604081016120ad8285611a63565b6104976020830184611a63565b606080825281016120cb8186611a6c565b905081810360208301526120df81856119b0565b9050610b7d6040830184611a5a565b602080825281016101b081611ad3565b602080825281016101b081611b36565b602080825281016101b081611b99565b602080825281016101b081611c22565b602080825281016101b081611c85565b602080825281016101b081611ce8565b602080825281016101b081611d4b565b602080825281016104978184611e09565b606080825281016120cb8186611e09565b604081016101b08284611f88565b60405181810167ffffffffffffffff811182821017156121b0576121b06122c5565b604052919050565b600067ffffffffffffffff8211156121d2576121d26122c5565b5060200290565b600067ffffffffffffffff8211156121f3576121f36122c5565b5060209081020190565b600067ffffffffffffffff821115612217576122176122c5565b506020601f91909101601f19160190565b90565b60200190565b50600490565b5190565b50600290565b919050565b90815260200190565b60006101b08261225f565b151590565b73ffffffffffffffffffffffffffffffffffffffff1690565b65ffffffffffff1690565b60ff1690565b82818337506000910152565b60005b838110156122b0578181015183820152602001612298565b838111156122bf576000848401525b50505050565bfe5b601f01601f191690565b6122da8161224f565b81146122e557600080fd5b50565b6122da8161225a565b6122da81612228565b6122da81612278565b6122da8161228356fea264697066735822122092c247f4055cc572763953a522f405c733ebd2bba2de58f46ef77adf75c5864d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "updateOutcomeFavourPlayer((address,bytes,(bytes32,uint256,uint8,bytes)[])[],uint8)": {
        "details": "Take an old outcome and update it to favour a given player       Assumes the outcome allocations can be indexed by the playerIndex",
        "params": {
          "outcome": "An outcome object to be rebalanced",
          "playerIndex": "Zero based index of the player to be assigned the favoured outcome"
        },
        "returns": {
          "_0": "The outcome resulting in a rebalance to the given player"
        }
      },
      "validTransition(((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),uint256)": {
        "details": "Override of IForceMove validTransition for the randomness protocol"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}