{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_gameState_",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "moveA",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "moveB",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "randomSeed",
          "type": "bytes32"
        }
      ],
      "name": "advanceState",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "mainType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "secondaryType",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "baseStats",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "stats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "address[4]",
                      "name": "moves",
                      "type": "address[4]"
                    },
                    {
                      "internalType": "address",
                      "name": "statusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "stausConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "specialStatusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "specialStatusConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveIndex",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveCounter",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ToshimonState.MonsterCard[]",
                  "name": "monsters",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "definition",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "used",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ToshimonState.ItemCard[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8",
                  "name": "activeMonsterIndex",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ToshimonState.PlayerState[2]",
              "name": "players",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct ToshimonState.GameState",
          "name": "gameState",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "moveA",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "moveB",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "randomSeed",
          "type": "bytes32"
        }
      ],
      "name": "advanceStateTyped",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "mainType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "secondaryType",
                      "type": "uint8"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "baseStats",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "hp",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "attack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "defense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spAttack",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "spDefense",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8",
                          "name": "speed",
                          "type": "uint8"
                        },
                        {
                          "internalType": "uint8[4]",
                          "name": "pp",
                          "type": "uint8[4]"
                        }
                      ],
                      "internalType": "struct ToshimonState.Stats",
                      "name": "stats",
                      "type": "tuple"
                    },
                    {
                      "internalType": "address[4]",
                      "name": "moves",
                      "type": "address[4]"
                    },
                    {
                      "internalType": "address",
                      "name": "statusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "stausConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "specialStatusCondition",
                      "type": "address"
                    },
                    {
                      "internalType": "uint8",
                      "name": "specialStatusConditionCounter",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveIndex",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "activeMoveCounter",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ToshimonState.MonsterCard[]",
                  "name": "monsters",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "cardId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "definition",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "used",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ToshimonState.ItemCard[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8",
                  "name": "activeMonsterIndex",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ToshimonState.PlayerState[2]",
              "name": "players",
              "type": "tuple[2]"
            }
          ],
          "internalType": "struct ToshimonState.GameState",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "outcome",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "playerIndex",
          "type": "uint8"
        }
      ],
      "name": "updateOutcomeFavourPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "destination",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "allocationType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ExitFormat.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ExitFormat.SingleAssetExit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "destination",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allocationType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "metadata",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ExitFormat.Allocation[]",
                  "name": "allocations",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ExitFormat.SingleAssetExit[]",
              "name": "outcome",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "appData",
              "type": "bytes"
            },
            {
              "internalType": "uint48",
              "name": "turnNum",
              "type": "uint48"
            },
            {
              "internalType": "bool",
              "name": "isFinal",
              "type": "bool"
            }
          ],
          "internalType": "struct IForceMoveApp.VariablePart",
          "name": "prev",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "destination",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "allocationType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "bytes",
                      "name": "metadata",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct ExitFormat.Allocation[]",
                  "name": "allocations",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ExitFormat.SingleAssetExit[]",
              "name": "outcome",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "appData",
              "type": "bytes"
            },
            {
              "internalType": "uint48",
              "name": "turnNum",
              "type": "uint48"
            },
            {
              "internalType": "bool",
              "name": "isFinal",
              "type": "bool"
            }
          ],
          "internalType": "struct IForceMoveApp.VariablePart",
          "name": "next",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "nParticipants",
          "type": "uint256"
        }
      ],
      "name": "validTransition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xed8b43cc48f0befae71300ffa953d01273fe8ef41165021e98edef0ce630d172",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2280648",
    "logsBloom": "0x
    "blockHash": "0x2ad16446ee0de45a53d766635bdb6d772233c4204863546f5f4ca0b52c5ece46",
    "transactionHash": "0xed8b43cc48f0befae71300ffa953d01273fe8ef41165021e98edef0ce630d172",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2280648",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2515da85d5a797d96ca5d49a9532dc5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_gameState_\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"moveA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"moveB\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"randomSeed\",\"type\":\"bytes32\"}],\"name\":\"advanceState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mainType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondaryType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"baseStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"internalType\":\"address[4]\",\"name\":\"moves\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"statusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stausConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"specialStatusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"specialStatusConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveCounter\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.MonsterCard[]\",\"name\":\"monsters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"definition\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"internalType\":\"struct ToshimonState.ItemCard[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"activeMonsterIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.PlayerState[2]\",\"name\":\"players\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct ToshimonState.GameState\",\"name\":\"gameState\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"moveA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"moveB\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"randomSeed\",\"type\":\"bytes32\"}],\"name\":\"advanceStateTyped\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"mainType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondaryType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"baseStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spAttack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spDefense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8[4]\",\"name\":\"pp\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct ToshimonState.Stats\",\"name\":\"stats\",\"type\":\"tuple\"},{\"internalType\":\"address[4]\",\"name\":\"moves\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"statusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stausConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"specialStatusCondition\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"specialStatusConditionCounter\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeMoveCounter\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.MonsterCard[]\",\"name\":\"monsters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"definition\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"internalType\":\"struct ToshimonState.ItemCard[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"activeMonsterIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct ToshimonState.PlayerState[2]\",\"name\":\"players\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct ToshimonState.GameState\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"playerIndex\",\"type\":\"uint8\"}],\"name\":\"updateOutcomeFavourPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"appData\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"turnNum\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"internalType\":\"struct IForceMoveApp.VariablePart\",\"name\":\"prev\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"allocationType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ExitFormat.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExitFormat.SingleAssetExit[]\",\"name\":\"outcome\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"appData\",\"type\":\"bytes\"},{\"internalType\":\"uint48\",\"name\":\"turnNum\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"internalType\":\"struct IForceMoveApp.VariablePart\",\"name\":\"next\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nParticipants\",\"type\":\"uint256\"}],\"name\":\"validTransition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"updateOutcomeFavourPlayer((address,bytes,(bytes32,uint256,uint8,bytes)[])[],uint8)\":{\"details\":\"Take an old outcome and update it to favour a given player       Assumes the outcome allocations can be indexed by the playerIndex\",\"params\":{\"outcome\":\"An outcome object to be rebalanced\",\"playerIndex\":\"Zero based index of the player to be assigned the favoured outcome\"},\"returns\":{\"_0\":\"The outcome resulting in a rebalance to the given player\"}},\"validTransition(((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),uint256)\":{\"details\":\"Override of IForceMove validTransition for the randomness protocol\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Toshimon/ToshimonStateTransition.sol\":\"ToshimonStateTransition\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@statechannels/exit-format/contracts/ExitFormat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n}\\n\\n// Ideally this would be imported from @connect/vector-withdraw-helpers\\n// And the interface would match this one (note WithdrawData calldata wd has become bytes calldata cD)\\ninterface WithdrawHelper {\\n    function execute(bytes calldata cD, uint256 actualAmount) external;\\n}\\n\\nlibrary ExitFormat {\\n    // An Exit is an array of SingleAssetExit (one for each asset)\\n    // Exit = SingleAssetExit[]\\n\\n    // A SingleAssetExit specifies\\n    // * an asset address (0 implies the native asset of the chain: on mainnet, this is ETH)\\n    // * custom metadata (optional field, can be zero bytes). This might specify how to transfer this particular asset (e.g. target an \\\"ERC20.transfer\\\"' method)\\n    // * an allocations array\\n    struct SingleAssetExit {\\n        address asset;\\n        bytes metadata;\\n        Allocation[] allocations;\\n    }\\n\\n    // allocations is an ordered array of Allocation.\\n    // The ordering is important, and may express e.g. a priority order for the exit\\n    // (which would make a material difference to the final state in the case of running out of gas or funds)\\n    // Allocations = Allocation[]\\n\\n    enum AllocationType {simple, withdrawHelper, guarantee}\\n\\n    // An Allocation specifies\\n    // * a destination, referring either to an ethereum address or an application-specific identifier\\n    // * an amount of asset\\n    // * an allocationType, which directs calling code on how to interpret the allocation\\n    // * custom metadata (optional field, can be zero bytes). This can be used flexibly by different protocols.\\n    struct Allocation {\\n        bytes32 destination;\\n        uint256 amount;\\n        uint8 allocationType;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * specifies the decoding format for metadata bytes fields\\n     * received with the WithdrawHelper flag\\n     */\\n    struct WithdrawHelperMetaData {\\n        address callTo;\\n        bytes callData;\\n    }\\n\\n    // We use underscore parentheses to denote an _encodedVariable_\\n    function encodeExit(SingleAssetExit[] memory exit)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(exit);\\n    }\\n\\n    function decodeExit(bytes memory _exit_)\\n        internal\\n        pure\\n        returns (SingleAssetExit[] memory)\\n    {\\n        return abi.decode(_exit_, (SingleAssetExit[]));\\n    }\\n\\n    function encodeAllocation(Allocation memory allocation)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(allocation);\\n    }\\n\\n    function decodeAllocation(bytes memory _allocation_)\\n        internal\\n        pure\\n        returns (Allocation memory)\\n    {\\n        return abi.decode(_allocation_, (Allocation));\\n    }\\n\\n    function exitsEqual(\\n        SingleAssetExit[] memory exitA,\\n        SingleAssetExit[] memory exitB\\n    ) internal pure returns (bool) {\\n        return _bytesEqual(encodeExit(exitA), encodeExit(exitB));\\n    }\\n\\n    /**\\n     * @notice Executes an exit by paying out assets and calling external contracts\\n     * @dev Executes an exit by paying out assets and calling external contracts\\n     * @param exit The exit to be paid out.\\n     */\\n    function executeExit(ExitFormat.SingleAssetExit[] memory exit) internal {\\n        for (uint256 assetIndex = 0; assetIndex < exit.length; assetIndex++) {\\n            executeSingleAssetExit(exit[assetIndex]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a single asset exit by paying out the asset and calling external contracts\\n     * @dev Executes a single asset exit by paying out the asset and calling external contracts\\n     * @param singleAssetExit The single asset exit to be paid out.\\n     */\\n    function executeSingleAssetExit(\\n        ExitFormat.SingleAssetExit memory singleAssetExit\\n    ) internal {\\n        address asset = singleAssetExit.asset;\\n        for (uint256 j = 0; j < singleAssetExit.allocations.length; j++) {\\n            require(\\n                _isAddress(singleAssetExit.allocations[j].destination),\\n                \\\"Destination is not a zero-padded address\\\"\\n            );\\n            address payable destination =\\n                payable(\\n                    address(\\n                        uint160(\\n                            uint256(singleAssetExit.allocations[j].destination)\\n                        )\\n                    )\\n                );\\n            uint256 amount = singleAssetExit.allocations[j].amount;\\n            if (asset == address(0)) {\\n                (bool success, ) = destination.call{value: amount}(\\\"\\\"); //solhint-disable-line avoid-low-level-calls\\n                require(success, \\\"Could not transfer ETH\\\");\\n            } else {\\n                // TODO support other token types via the singleAssetExit.metadata field\\n                ERC20Interface(asset).transfer(destination, amount);\\n            }\\n            if (\\n                singleAssetExit.allocations[j].allocationType ==\\n                uint8(AllocationType.withdrawHelper)\\n            ) {\\n                WithdrawHelperMetaData memory wd =\\n                    _parseWithdrawHelper(\\n                        singleAssetExit.allocations[j].metadata\\n                    );\\n                WithdrawHelper(wd.callTo).execute(wd.callData, amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether given destination is a valid Ethereum address\\n     * @dev Checks whether given destination is a valid Ethereum address\\n     * @param destination the destination to be checked\\n     */\\n    function _isAddress(bytes32 destination) internal pure returns (bool) {\\n        return uint96(bytes12(destination)) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns a callTo address and callData from metadata bytes\\n     * @dev Returns a callTo address and callData from metadata bytes\\n     */\\n    function _parseWithdrawHelper(bytes memory metadata)\\n        internal\\n        pure\\n        returns (WithdrawHelperMetaData memory)\\n    {\\n        return abi.decode(metadata, (WithdrawHelperMetaData));\\n    }\\n\\n    /**\\n     * @notice Check for equality of two byte strings\\n     * @dev Check for equality of two byte strings\\n     * @param _preBytes One bytes string\\n     * @param _postBytes The other bytes string\\n     * @return true if the bytes are identical, false otherwise.\\n     */\\n    function _bytesEqual(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // copied from https://www.npmjs.com/package/solidity-bytes-utils/v/0.1.1\\n        bool success = true;\\n\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n        /* solhint-disable no-inline-assembly */\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xb2d09e91c8f0496adba9701a81c900b25b78766a7a6ef23df4acb2f79de86e2e\",\"license\":\"MIT\"},\"contracts/CommitReveal/CommitRevealApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Created on 2022-06-02 12:37\\n * @summary: An abstract contract for implementing a ForceMove application with shared randomness\\n * @author: Willem Olding (ChainSafe)\\n */\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport '../StateChannel/interfaces/IForceMoveApp.sol';\\nimport {ExitFormat as Outcome} from '@statechannels/exit-format/contracts/ExitFormat.sol';\\n\\nabstract contract CommitRevealApp is IForceMoveApp {\\n\\n    // player indices\\n    uint8 constant A = 0;\\n    uint8 constant B = 1;\\n\\n    // The phases of the protocol\\n    enum Phase { A_COMMIT, B_COMMIT, A_REVEAL, B_REVEAL }\\n\\n    // Data that must be included in each reveal phase state update\\n    struct Reveal {\\n        uint8 move;\\n        bytes32 seed;\\n    }\\n\\n    // Application specific data for the ForceMove app\\n    // This itself contains game specific data\\n    struct AppData {\\n        bytes32 preCommitA;\\n        bytes32 preCommitB;\\n\\n        Reveal revealA;\\n        Reveal revealB;\\n\\n        bytes gameState;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Takes a game state and outcome and mutates it using a move from each player\\n     *      collaboratively produced randomness\\n     * @param gameState The prior game state to be mutated and returned\\n     * @param outcome The prior outcome that can be mutated and returned\\n     * @param moveA Move from player A\\n     * @param moveB Move from player B\\n     * @param randomSeed The combined random seed produced by the protocol \\n     * @return The outcome resulting in a rebalance to the given player\\n     */\\n    function advanceState(\\n        bytes memory gameState,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n    ) virtual public pure returns (bytes memory, Outcome.SingleAssetExit[] memory, bool);\\n\\n    /**\\n     * @dev Take an old outcome and update it to favour a given player\\n     *       Assumes the outcome allocations can be indexed by the playerIndex\\n     * @param outcome An outcome object to be rebalanced\\n     * @param playerIndex Zero based index of the player to be assigned the favoured outcome\\n     * @return The outcome resulting in a rebalance to the given player\\n     */\\n    function updateOutcomeFavourPlayer(\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 playerIndex\\n    ) virtual public pure returns (Outcome.SingleAssetExit[] memory);\\n\\n\\n    /**\\n     * @notice Decodes the appData.\\n     * @dev Decodes the appData.\\n     * @param appDataBytes The abi.encode of an AppData struct describing the application-specific data.\\n     * @return A AppData struct containing the application-specific data.\\n     */\\n    function _appData(bytes memory appDataBytes) internal pure returns (AppData memory) {\\n        return abi.decode(appDataBytes, (AppData));\\n    }\\n\\n    /**\\n     * @notice Combines two pieces of randomness to produce a single random seed\\n     * @dev Combines two pieces of randomness to produce a single random seed\\n     * @param partSeedA A random value\\n     * @param partSeedB A random value\\n     * @return A random seed from the combined randomness\\n     */\\n    function _mergeSeeds(bytes32 partSeedA, bytes32 partSeedB) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(partSeedA, partSeedB));\\n    }\\n\\n    // helper to do byte array comparison\\n    // can replace with a more efficient version later\\n    function _compareBytes(bytes memory a, bytes memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    // helper to do byte array comparison\\n    function _compareReveals(Reveal memory a, Reveal memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encode((a))) == keccak256(abi.encode((b))));\\n    }\\n\\n    // helper to do byte array comparison\\n    function _compareOutcomes(Outcome.SingleAssetExit[] memory a, Outcome.SingleAssetExit[] memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encode((a))) == keccak256(abi.encode((b))));\\n    }\\n\\n    /**\\n     * @dev Get the current phase given the turn number\\n     * @param turnNum The current sequence/turn number\\n     * @return Phase\\n     */\\n    function _phase(uint48 turnNum) internal pure returns (Phase) {\\n\\n        // The first 4 turnNums (0,1,2,3) are used for the pre-fund and post-fund setup phase\\n        // This function will be called at all with those turnNums.\\n        // Coincidentally this is a multiple of the number of phases in CommitReveal so there \\n        // is no need to adjust.\\n        \\n        // This conversion is safe as the modulo is always < 4\\n        return Phase(turnNum % 4);\\n    }\\n\\n    /**\\n     * @dev Override of IForceMove validTransition for the randomness protocol\\n     */\\n    function validTransition(\\n        VariablePart memory prev,\\n        VariablePart memory next,\\n        uint256 nParticipants\\n    ) public pure override returns (bool) {\\n        require(nParticipants == 2, \\\"Only two participant commit/reveal games are supported\\\");\\n\\n        // we are in the commit/reveal cycle of gameplay\\n        Phase phase = _phase(next.turnNum);\\n\\n        AppData memory prevData = _appData(prev.appData);\\n        AppData memory nextData = _appData(next.appData);\\n\\n        if        (phase == Phase.A_COMMIT) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [A commitment] move\\\");\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, A)));\\n        } else if (phase == Phase.B_COMMIT) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [B commitment] move\\\");\\n            require(prevData.preCommitA == nextData.preCommitA, \\\"Cannot mutate A's preCommit in [B commitment] move\\\");\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, B)));\\n        } else if (phase == Phase.A_REVEAL) {\\n            // no change constraints\\n            require(_compareBytes(prevData.gameState, nextData.gameState), \\\"Cannot mutate the game state in [A reveal] move\\\");\\n            // require(prevData.preCommitA == nextData.preCommitA, \\\"Cannot mutate A's preCommit in [A reveal] move\\\");\\n            require(prevData.preCommitB == nextData.preCommitB, \\\"Cannot mutate B's preCommit in [A reveal] move\\\");\\n            // reveal matches preCommit\\n            require(prevData.preCommitA ==  keccak256(abi.encode(nextData.revealA)));\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, A)));\\n        } else if (phase == Phase.B_REVEAL) {\\n            // reveal matches preCommit\\n            require(prevData.preCommitB == keccak256(abi.encode(nextData.revealB)));\\n            // outcome\\n            require(_compareOutcomes(next.outcome, updateOutcomeFavourPlayer(prev.outcome, B)));\\n            // game state update is made correctly with respect to the committed moves and random seeds\\n            bytes32 randomSeed = _mergeSeeds(nextData.revealA.seed, nextData.revealB.seed);\\n            (bytes memory newState,, bool isFinal) = advanceState(prevData.gameState, prev.outcome, nextData.revealA.move, nextData.revealB.move, randomSeed);\\n            require(\\n                _compareBytes(\\n                    newState,\\n                    nextData.gameState\\n                ), \\\"New state must be computed based on preCommit moves in [B reveal] move\\\"\\n            );\\n            // if the game state concluded this must be reflected in the variable part of the channel state\\n            require(isFinal == next.isFinal);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x5ee1152dd88092ffe3f4db06fe095ec84277a01d7edc1483208ee9a65b5483be\",\"license\":\"MIT\"},\"contracts/StateChannel/interfaces/IForceMoveApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {ExitFormat as Outcome} from '@statechannels/exit-format/contracts/ExitFormat.sol';\\n\\n/**\\n * @dev The IForceMoveApp interface calls for its children to implement an application-specific validTransition function, defining the state machine of a ForceMove state channel DApp.\\n */\\ninterface IForceMoveApp {\\n    struct VariablePart {\\n        Outcome.SingleAssetExit[] outcome;\\n        bytes appData;\\n        uint48 turnNum;\\n        bool isFinal;\\n    }\\n\\n    /**\\n     * @notice Encodes application-specific rules for a particular ForceMove-compliant state channel.\\n     * @dev Encodes application-specific rules for a particular ForceMove-compliant state channel.\\n     * @param a State being transitioned from.\\n     * @param b State being transitioned to.\\n     * @param nParticipants Number of participants in this state channel.\\n     * @return true if the transition conforms to this application's rules, false otherwise\\n     */\\n    function validTransition(\\n        VariablePart calldata a,\\n        VariablePart calldata b,\\n        uint256 nParticipants\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xa4c7f59e310a4aa1ac388ab9b5272c1ef86e959d44615bb8c9f764c1752b2c13\",\"license\":\"MIT\"},\"contracts/Toshimon/ToshimonState.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * Created on 2022-06-06\\n * @summary: Types for representing the toshimon game state\\n * @author: Willem Olding (ChainSafe)\\n */\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nlibrary ToshimonState {\\n\\n\\tstruct GameState {\\n\\t\\tPlayerState[2] players;\\n\\t}\\n\\n\\tstruct PlayerState {\\n\\t\\tMonsterCard[] monsters;\\n\\t\\tItemCard[] items;\\n\\t\\tuint8 activeMonsterIndex;\\n\\t}\\n\\n\\tstruct MonsterCard {\\n\\t\\tuint256 cardId;\\n\\t\\tuint8 mainType;\\n\\t\\tuint8 secondaryType;\\n\\t\\tStats baseStats;\\n\\t\\tStats stats;\\n\\t\\taddress[4] moves;\\n\\t\\taddress statusCondition;\\n\\t\\tuint8 stausConditionCounter;\\n\\t\\taddress specialStatusCondition;\\n\\t\\tuint8 specialStatusConditionCounter;\\n\\t\\tuint8 activeMoveIndex;\\n\\t\\tuint8 activeMoveCounter;\\n\\t}\\n\\n\\tstruct Stats {\\n\\t\\tuint8 hp;\\n\\t\\tuint8 attack;\\n\\t\\tuint8 defense;\\n\\t\\tuint8 spAttack;\\n\\t\\tuint8 spDefense;\\n\\t\\tuint8 speed;\\n\\t\\tuint8[4] pp;\\n\\t}\\n\\n\\tstruct ItemCard {\\n\\t\\tuint256 cardId;\\n\\t\\taddress definition;\\n\\t\\tbool used;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbf00add376968466f455743a5d00813c56bdb5ab475d4aaa746a4a6e8c327622\",\"license\":\"UNLICENSED\"},\"contracts/Toshimon/ToshimonStateTransition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Created on 2022-06-23 12:37\\n * @summary: The state transition function that captures all the rules of the Toshimon battle game\\n * @author: Willem Olding (ChainSafe)\\n */\\n pragma solidity 0.7.6;\\n pragma experimental ABIEncoderV2;\\n\\n import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n import '../CommitReveal/CommitRevealApp.sol';\\n import { ToshimonState as TM } from './ToshimonState.sol';\\n import './interfaces/IMove.sol';\\n import './interfaces/IItem.sol';\\n\\n\\n contract ToshimonStateTransition is CommitRevealApp {\\n\\n    function advanceState(\\n        bytes memory _gameState_,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n        ) public pure override returns (bytes memory, Outcome.SingleAssetExit[] memory, bool) {\\n        TM.GameState memory gameState = abi.decode(_gameState_, (TM.GameState));\\n        (TM.GameState memory newState,  Outcome.SingleAssetExit[] memory newOutcome, bool isFinal) = advanceStateTyped(gameState, outcome, moveA, moveB, randomSeed);\\n        return (abi.encode(newState), newOutcome, isFinal);\\n    }\\n\\n    function advanceStateTyped(\\n        TM.GameState memory gameState,\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 moveA,\\n        uint8 moveB,\\n        bytes32 randomSeed\\n        ) public pure returns (TM.GameState memory, Outcome.SingleAssetExit[] memory, bool) {\\n\\n\\n        // if either player is unconcious then no more moves can be made\\n        // and the game is over. No further state updates possible.\\n        if (_is_unconcious(gameState.players[A]) || _is_unconcious(gameState.players[B])) {\\n            return (gameState, outcome, true);\\n        }\\n        \\n        // first up resolve any switch monster actions\\n        // These occur first and order between players doesn't matter\\n        if ( _isSwapAction(moveA) ) {\\n            gameState.players[A].activeMonsterIndex = moveA - 4;\\n        }\\n        if ( _isSwapAction(moveB) ) {\\n            gameState.players[A].activeMonsterIndex = moveB - 4;\\n        }\\n\\n        // next up resolve items. These can only be applied to the active monster\\n        // and they are resolved before attacks so again order doesn't matter here\\n        if ( _isItemAction(moveA) ) {\\n            gameState = _useItem(gameState, moveA - 9, A, randomSeed);\\n        }\\n        if ( _isItemAction(moveB) ) {\\n            gameState = _useItem(gameState, moveA - 9, B, randomSeed);\\n        }        \\n\\n        // next up resolve attacks. Speed should be used to resolve\\n        // if both players are attackign but here A always goes first\\n        // for demo purposes\\n        if ( _isMoveAction(moveA) ) {\\n            gameState = _makeMove(gameState, moveA,  A, randomSeed);\\n        }\\n        if ( _isMoveAction(moveB) ) {\\n            gameState = _makeMove(gameState, moveB,  B, randomSeed);\\n        }\\n\\n        return (gameState, outcome, true);\\n\\n    }\\n\\n    // For incentive reasons it needs to ensure that each time a player makes\\n    // a state update they set themselves as the winning player\\n    // unless the game forces otherwise via a conclusion\\n    // \\n    // The entire balance is reallocated to the winning player index by this function\\n    // \\n    // This assumes the outcome is ordered according to the players.\\n    function updateOutcomeFavourPlayer(\\n        Outcome.SingleAssetExit[] memory outcome,\\n        uint8 playerIndex\\n        ) override public pure returns (Outcome.SingleAssetExit[] memory) {\\n        Outcome.SingleAssetExit memory wagerAssetExit = outcome[0];\\n        uint256 total = wagerAssetExit.allocations[0].amount + wagerAssetExit.allocations[1].amount;\\n\\n        outcome[0].allocations[playerIndex].amount = total;\\n        outcome[0].allocations[~playerIndex].amount = 0;\\n\\n        return (outcome);\\n    }\\n\\n    // A player is unconcious if all their monsters have HP == 0\\n    function _is_unconcious(TM.PlayerState memory playerState) pure internal returns (bool) {\\n        bool unconcious = true;\\n        for (uint8 i = 0; i < playerState.monsters.length; i++) {\\n            if (playerState.monsters[i].stats.hp > 0) {\\n                unconcious = false;\\n            }\\n        }\\n        return (unconcious);\\n    }\\n\\n    function _isItemAction(uint8 move) pure internal returns (bool) {\\n        return (move >=9 && move <=13);\\n    }\\n\\n    function _isSwapAction(uint8 move) pure internal returns (bool) {\\n        return (move >=4 && move <=8);\\n    }\\n\\n    function _isMoveAction(uint8 move) pure internal returns (bool) {\\n        return (move < 4);\\n    }\\n\\n    function _makeMove(TM.GameState memory gameState, uint8 moveIndex, uint8 mover, bytes32 randomSeed) pure internal returns (TM.GameState memory) {\\n        TM.MonsterCard memory attacker = _getActiveMonster(gameState.players[mover]);\\n        TM.MonsterCard memory defender = _getActiveMonster(gameState.players[~mover]);\\n\\n        // bail if attacker is unconcious or no PP available\\n        if (attacker.stats.hp == 0) {\\n            return gameState;\\n        }\\n        if (attacker.stats.pp[moveIndex] == 0) {\\n            return gameState;\\n        }        \\n\\n        // reduce the PP of the attacker on that move\\n        attacker.stats.pp[moveIndex] -= 1;\\n\\n        // apply move\\n        gameState = IMove(attacker.moves[moveIndex]).applyMove(gameState, mover, randomSeed);\\n\\n        return gameState;\\n\\n    }\\n\\n    function _useItem(TM.GameState memory gameState, uint8 itemIndex, uint8 mover, bytes32 randomSeed) pure internal returns (TM.GameState memory) {\\n        TM.PlayerState memory user = gameState.players[mover];\\n\\n        // mark the item as used\\n        user.items[itemIndex].used = true;\\n\\n        // apply the item\\n        gameState = IItem(user.items[itemIndex].definition).applyItem(gameState, mover, user.activeMonsterIndex, randomSeed);\\n\\n        return gameState;\\n\\n    }\\n\\n    function _getActiveMonster(TM.PlayerState memory playerState) pure internal returns (TM.MonsterCard memory) {\\n        return (playerState.monsters[playerState.activeMonsterIndex]);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x845bef17813d2d2d2e92ba2c46f20a9c47c73bd5196a79fab369930e5c648e88\",\"license\":\"MIT\"},\"contracts/Toshimon/interfaces/IItem.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { ToshimonState as TM } from '../ToshimonState.sol';\\n\\ninterface IItem {\\n\\tfunction applyItem(TM.GameState memory state, uint8 mover, uint8 monster, bytes32 randomSeed) external pure returns (TM.GameState memory);\\n}\\n\",\"keccak256\":\"0x70cef7952544c993c78a29f0ec466f9235aaf80cd9a83dff022255d9414f5857\",\"license\":\"UNLICENSED\"},\"contracts/Toshimon/interfaces/IMove.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { ToshimonState as TM } from '../ToshimonState.sol';\\n\\ninterface IMove {\\n\\tfunction applyMove(TM.GameState memory state, uint8 mover, bytes32 randomSeed) external pure returns (TM.GameState memory);\\n}\\n\",\"keccak256\":\"0x0ebc99629a89e0f37948e0e20bb353c8287cbc5464c8dcf24afd53c08ac50cbe\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612850806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063215158ec146100515780632934b2e41461007a5780634e42d6e01461009a578063bd413823146100bc575b600080fd5b61006461005f3660046119ed565b6100de565b6040516100719190612527565b60405180910390f35b61008d610088366004611ba2565b6101b6565b6040516100719190612538565b6100ad6100a8366004611b4b565b61049e565b60405161007193929190612616565b6100cf6100ca366004611a3e565b6105b7565b60405161007193929190612561565b60606000836000815181106100ef57fe5b602002602001015190506000816040015160018151811061010c57fe5b602002602001015160200151826040015160008151811061012957fe5b602002602001015160200151019050808560008151811061014657fe5b6020026020010151604001518560ff168151811061016057fe5b6020026020010151602001818152505060008560008151811061017f57fe5b602002602001015160400151851960ff168151811061019a57fe5b6020026020010151602001818152505084925050505b92915050565b6000816002146101e15760405162461bcd60e51b81526004016101d8906125d5565b60405180910390fd5b60006101f0846040015161061d565b90506000610201866020015161062e565b90506000610212866020015161062e565b9050600083600381111561022257fe5b141561027d5761023a8260800151826080015161064a565b6102565760405162461bcd60e51b81526004016101d8906125f5565b8551875161026f919061026a9060006100de565b6106a3565b61027857600080fd5b61048f565b600183600381111561028b57fe5b14156102f4576102a38260800151826080015161064a565b6102bf5760405162461bcd60e51b81526004016101d8906125c5565b80518251146102e05760405162461bcd60e51b81526004016101d8906125a5565b8551875161026f919061026a9060016100de565b600283600381111561030257fe5b14156103975761031a8260800151826080015161064a565b6103365760405162461bcd60e51b81526004016101d8906125e5565b806020015182602001511461035d5760405162461bcd60e51b81526004016101d890612595565b8060400151604051602001610372919061268e565b6040516020818303038152906040528051906020012082600001511461025657600080fd5b60038360038111156103a557fe5b141561048f5780606001516040516020016103c0919061268e565b604051602081830303815290604052805190602001208260200151146103e557600080fd5b855187516103f9919061026a9060016100de565b61040257600080fd5b600061041e8260400151602001518360600151602001516106dd565b905060008061044885608001518b60000151866040015160000151876060015160000151876105b7565b925050915061045b82856080015161064a565b6104775760405162461bcd60e51b81526004016101d8906125b5565b886060015115158115151461048b57600080fd5b5050505b600193505050505b9392505050565b6104a6610a52565b85516060906000906104be90825b6020020151610710565b806104d1575087516104d19060016104b4565b156104e4575086915085905060016105ac565b6104ed86610765565b156105045787515160ff6003198801166040909101525b61050d85610765565b156105245787515160ff6003198701166040909101525b61052d86610783565b156105455761054288600988036000876107a1565b97505b61054e85610783565b156105665761056388600988036001876107a1565b97505b61056f866108b2565b156105845761058188876000876108be565b97505b61058d856108b2565b156105a25761059f88866001876108be565b97505b5086915085905060015b955095509592505050565b606080600080888060200190518101906105d19190611b16565b905060008060006105e5848c8c8c8c61049e565b925092509250826040516020016105fc9190612605565b60408051808303601f190181529190529c919b509950975050505050505050565b60006003808316908111156101b057fe5b610636610a6a565b818060200190518101906101b09190611ae1565b60008160405160200161065d919061251b565b6040516020818303038152906040528051906020012083604051602001610684919061251b565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016106b69190612527565b60405160208183030381529060405280519060200120836040516020016106849190612527565b600082826040516020016106f2929190612546565b60405160208183030381529060405280519060200120905092915050565b60006001815b83515160ff8216101561075e57600084600001518260ff168151811061073857fe5b6020026020010151608001516000015160ff16111561075657600091505b600101610716565b5092915050565b600060048260ff16101580156101b0575050600860ff909116111590565b600060098260ff16101580156101b0575050600d60ff909116111590565b6107a9610a52565b845160009060ff8516600281106107bc57fe5b60200201519050600181602001518660ff16815181106107d857fe5b6020026020010151604001901515908115158152505080602001518560ff168151811061080157fe5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663ba96c4b187868460400151876040518563ffffffff1660e01b815260040161084f9493929190612654565b60006040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a39190810190611b16565b9550859150505b949350505050565b600460ff821610919050565b6108c6610a52565b60006108e886600001518560ff16600281106108de57fe5b6020020151610a24565b905060006109038760000151861960ff16600281106108de57fe5b60808301515190915060ff1661091d5786925050506108aa565b816080015160c001518660ff166004811061093457fe5b602002015160ff1661094a5786925050506108aa565b6001826080015160c001518760ff166004811061096357fe5b60200201805160ff9290038216905260a08301519087166004811061098457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff16636a9d22628887876040518463ffffffff1660e01b81526004016109c593929190612627565b60006040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a199190810190611b16565b979650505050505050565b610a2c610aa3565b8160000151826040015160ff1681518110610a4357fe5b60200260200101519050919050565b6040518060200160405280610a65610b1c565b905290565b6040805160a08101825260008082526020820152908101610a89610b49565b8152602001610a96610b49565b8152602001606081525090565b60405180610180016040528060008152602001600060ff168152602001600060ff168152602001610ad2610b60565b8152602001610adf610b60565b8152602001610aec610b9a565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b60405180604001604052806002905b610b33610bb8565b815260200190600190039081610b2b5790505090565b604080518082019091526000808252602082015290565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260c08101610a655b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806060815260200160608152602001600060ff1681525090565b6000610bef610bea846126c6565b61269c565b90508082856020860285011115610c0557600080fd5b60005b85811015610c2f57610c1a8783610ff9565b83526020928301929190910190600101610c08565b5050509392505050565b6000610c47610bea846126c6565b90508082856020860285011115610c5d57600080fd5b60005b85811015610c2f57610c728783611004565b83526020928301929190910190600101610c60565b6000610c95610bea846126e7565b8381529050602081018260005b85811015610c2f5781358501610cb888826111e9565b8452506020928301929190910190600101610ca2565b6000610cdc610bea846126e7565b83815290506020810182606085028101861015610cf857600080fd5b60005b85811015610c2f57610d0d878361138c565b835260209092019160609190910190600101610cfb565b6000610d32610bea846126e7565b83815290506020810182606085028101861015610d4e57600080fd5b60005b85811015610c2f57610d6387836113e3565b835260209092019160609190910190600101610d51565b6000610d88610bea846126e7565b8381529050602081018261042085028101861015610da557600080fd5b60005b85811015610c2f57610dba8783611430565b83526020909201916104209190910190600101610da8565b6000610de0610bea846126e7565b8381529050602081018261042085028101861015610dfd57600080fd5b60005b85811015610c2f57610e128783611547565b83526020909201916104209190910190600101610e00565b6000610e38610bea846126c6565b9050808260005b85811015610c2f5781358501610e558882611651565b8452506020928301929190910190600101610e3f565b6000610e79610bea846126c6565b9050808260005b85811015610c2f5781518501610e9688826116ce565b8452506020928301929190910190600101610e80565b6000610eba610bea846126e7565b8381529050602081018260005b85811015610c2f5781358501610edd8882611787565b8452506020928301929190910190600101610ec7565b6000610f01610bea846126c6565b90508082856020860285011115610f1757600080fd5b60005b85811015610c2f57610f2c87836119d7565b83526020928301929190910190600101610f1a565b6000610f4f610bea846126c6565b90508082856020860285011115610f6557600080fd5b60005b85811015610c2f57610f7a87836119e2565b83526020928301929190910190600101610f68565b6000610f9d610bea8461270b565b905082815260208101848484011115610fb557600080fd5b610fc0848285612797565b509392505050565b6000610fd6610bea8461270b565b905082815260208101848484011115610fee57600080fd5b610fc08482856127a3565b80356101b0816127df565b80516101b0816127df565b600082601f83011261101f578081fd5b60046108aa848285610bdc565b600082601f83011261103c578081fd5b60046108aa848285610c39565b600082601f830112611059578081fd5b81356108aa848260208601610c87565b600082601f830112611079578081fd5b81356108aa848260208601610cce565b600082601f830112611099578081fd5b81516108aa848260208601610d24565b600082601f8301126110b9578081fd5b81356108aa848260208601610d7a565b600082601f8301126110d9578081fd5b81516108aa848260208601610dd2565b600082601f8301126110f9578081fd5b60026108aa848285610e2a565b600082601f830112611116578081fd5b60026108aa848285610e6b565b600082601f830112611133578081fd5b81356108aa848260208601610eac565b600082601f830112611153578081fd5b60046108aa848285610ef3565b600082601f830112611170578081fd5b60046108aa848285610f41565b80356101b0816127f6565b80516101b0816127f6565b80356101b0816127ff565b80516101b0816127ff565b600082601f8301126111b9578081fd5b81356108aa848260208601610f8f565b600082601f8301126111d9578081fd5b81516108aa848260208601610fc8565b6000608082840312156111fa578081fd5b611204608061269c565b905060006112128484611193565b81830152602061122485828601611193565b908301526040611236858583016119d7565b90830152606083013567ffffffffffffffff811115611253578182fd5b61125f858286016111a9565b6060840152505092915050565b600060e0828403121561127d578081fd5b61128760a061269c565b90506000611295848461119e565b8183015260206112a78582860161119e565b9083015260406112b98585830161174c565b9083015260806112cb8585830161174c565b606084015260c084015167ffffffffffffffff8111156112e9578283fd5b6112f5868287016111c9565b8285015250505092915050565b600060208284031215611313578081fd5b61131d602061269c565b9050813567ffffffffffffffff81111561133657600080fd5b611342848285016110e9565b82525092915050565b60006020828403121561135c578081fd5b611366602061269c565b825190915067ffffffffffffffff81111561138057600080fd5b61134284828501611106565b60006060828403121561139d578081fd5b6113a7606061269c565b905060006113b58484611193565b9082015260206113c784848301610ff9565b9082015260406113d98484830161117d565b9082015292915050565b6000606082840312156113f4578081fd5b6113fe606061269c565b9050600061140c848461119e565b90820152602061141e84848301611004565b9082015260406113d984848301611188565b60006104208284031215611442578081fd5b61144d61018061269c565b9050600061145b8484611193565b90820152602061146d848483016119d7565b90820152604061147f848483016119d7565b90820152606061149184848301611811565b908201526101a06114a484848301611811565b6080830152506102e06114b98482850161100f565b60a0830152506103606114ce84828501610ff9565b60c0830152506103806114e3848285016119d7565b60e0830152506103a06114f884828501610ff9565b610100830152506103c061150e848285016119d7565b610120830152506103e0611524848285016119d7565b6101408301525061040061153a848285016119d7565b6101608301525092915050565b60006104208284031215611559578081fd5b61156461018061269c565b90506000611572848461119e565b908201526020611584848483016119e2565b908201526040611596848483016119e2565b9082015260606115a8848483016118a7565b908201526101a06115bb848483016118a7565b6080830152506102e06115d08482850161102c565b60a0830152506103606115e584828501611004565b60c0830152506103806115fa848285016119e2565b60e0830152506103a061160f84828501611004565b610100830152506103c0611625848285016119e2565b610120830152506103e061163b848285016119e2565b6101408301525061040061153a848285016119e2565b600060608284031215611662578081fd5b61166c606061269c565b9050813567ffffffffffffffff81111561168557600080fd5b611691848285016110a9565b825250602082013567ffffffffffffffff8111156116ae57600080fd5b6116ba84828501611069565b60208301525060406113d9848285016119d7565b6000606082840312156116df578081fd5b6116e9606061269c565b825190915067ffffffffffffffff81111561170357600080fd5b61170f848285016110c9565b825250602082015167ffffffffffffffff81111561172c57600080fd5b61173884828501611089565b60208301525060406113d9848285016119e2565b60006040828403121561175d578081fd5b611767604061269c565b9050600061177584846119e2565b9082015260206113d98484830161119e565b600060608284031215611798578081fd5b6117a2606061269c565b905060006117b08484610ff9565b81830152602083013567ffffffffffffffff8111156117cd578182fd5b6117d9858286016111a9565b602084015250604083013567ffffffffffffffff8111156117f8578182fd5b61180485828601611049565b6040840152505092915050565b60006101408284031215611823578081fd5b61182d60e061269c565b9050600061183b84846119d7565b90820152602061184d848483016119d7565b90820152604061185f848483016119d7565b908201526060611871848483016119d7565b908201526080611883848483016119d7565b9082015260a0611895848483016119d7565b9082015260c06113d984848301611143565b600061014082840312156118b9578081fd5b6118c360e061269c565b905060006118d184846119e2565b9082015260206118e3848483016119e2565b9082015260406118f5848483016119e2565b908201526060611907848483016119e2565b908201526080611919848483016119e2565b9082015260a061192b848483016119e2565b9082015260c06113d984848301611160565b60006080828403121561194e578081fd5b611958608061269c565b9050813567ffffffffffffffff81111561197157600080fd5b61197d84828501611123565b825250602082013567ffffffffffffffff81111561199a57600080fd5b6119a6848285016111a9565b60208301525060406119ba848285016119cc565b9082015260606113d98484830161117d565b80356101b081612808565b80356101b081612811565b80516101b081612811565b600080604083850312156119ff578182fd5b8183013567ffffffffffffffff811115611a17578283fd5b611a2385828601611123565b9250506020611a34858286016119d7565b9150509250929050565b600080600080600060a08688031215611a55578081fd5b8086013567ffffffffffffffff811115611a6d578182fd5b611a79888289016111a9565b955050602086013567ffffffffffffffff811115611a95578182fd5b611aa188828901611123565b9450506040611ab2888289016119d7565b9350506060611ac3888289016119d7565b9250506080611ad488828901611193565b9150509295509295909350565b600060208284031215611af2578081fd5b8082015167ffffffffffffffff811115611b0a578182fd5b6108aa8482850161126c565b600060208284031215611b27578081fd5b8082015167ffffffffffffffff811115611b3f578182fd5b6108aa8482850161134b565b600080600080600060a08688031215611b62578283fd5b8286013567ffffffffffffffff811115611b7a578384fd5b611b8688828901611302565b955050602086013567ffffffffffffffff811115611a95578384fd5b600080600060608486031215611bb6578081fd5b8084013567ffffffffffffffff811115611bce578182fd5b611bda8682870161193d565b935050602084013567ffffffffffffffff811115611bf6578182fd5b611c028682870161193d565b9250506040611c1386828701611193565b9150509250925092565b6000611c298383611c8a565b505060200190565b60006104978383612255565b6000611c4983836122c8565b505060600190565b6000611c5d83836122ff565b50506104200190565b600061049783836123e8565b6000610497838361244e565b6000611c298383612512565b611c938161275d565b82525050565b611ca28161273f565b611cac818461274f565b9250611cb782612736565b60005b82811015611ce4578151611cce8682611c1d565b955050611cda82612739565b9150600101611cba565b5050505050565b6000611cf682612745565b611d008185612754565b935083602082028501611d1285612739565b845b84811015611d4a5783830388528151611d2d8482611c31565b935050611d3982612739565b602098909801979150600101611d14565b50909695505050505050565b6000611d6182612745565b611d6b8185612754565b9350611d7683612739565b825b82811015611da2578151611d8c8782611c3d565b965050611d9882612739565b9150600101611d78565b5093949350505050565b6000611db782612745565b611dc18185612754565b9350611dcc83612739565b825b82811015611da2578151611de28782611c51565b965050611dee82612739565b9150600101611dce565b6000611e0382612749565b611e0d818561274f565b935083602082028501611e1f85612736565b845b84811015611d4a5783830388528151611e3a8482611c66565b935050611e4682612739565b602098909801979150600101611e21565b6000611e6282612745565b611e6c8185612754565b935083602082028501611e7e85612739565b845b84811015611d4a5783830388528151611e998482611c72565b935050611ea582612739565b602098909801979150600101611e80565b611ebf8161273f565b611ec9818461274f565b9250611ed482612736565b60005b82811015611ce4578151611eeb8682611c7e565b955050611ef782612739565b9150600101611ed7565b611c9381612768565b611c9381612736565b6000611f1e82612745565b611f288185612754565b9350611f388185602086016127a3565b611f41816127d5565b9093019392505050565b6000611f5682612745565b611f60818561274f565b9350611f708185602086016127a3565b9290920192915050565b6000611f87602e83612754565b7f43616e6e6f74206d75746174652042277320707265436f6d6d697420696e205b918101919091527f412072657665616c5d206d6f76650000000000000000000000000000000000006020820152604001919050565b6000611fea603283612754565b7f43616e6e6f74206d75746174652041277320707265436f6d6d697420696e205b918101919091527f4220636f6d6d69746d656e745d206d6f766500000000000000000000000000006020820152604001919050565b600061204d604683612754565b7f4e6577207374617465206d75737420626520636f6d7075746564206261736564918101919091527f206f6e20707265436f6d6d6974206d6f76657320696e205b422072657665616c60208201527f5d206d6f766500000000000000000000000000000000000000000000000000006040820152606001919050565b60006120d6603383612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4220636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b6000612139603683612754565b7f4f6e6c792074776f207061727469636970616e7420636f6d6d69742f72657665918101919091527f616c2067616d65732061726520737570706f72746564000000000000000000006020820152604001919050565b600061219c602f83612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b412072657665616c5d206d6f766500000000000000000000000000000000006020820152604001919050565b60006121ff603383612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4120636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b805160009060808401906122698582611f0a565b50602083015161227c6020860182611f0a565b50604083015161228f6040860182612512565b50606083015184820360608601526122a78282611f13565b95945050505050565b80516020808452600091908401906122a78282611df8565b80516122d48382611f0a565b5060208101516122e76020840182611c8a565b5060408101516122fa6040840182611f01565b505050565b805161230b8382611f0a565b50602081015161231e6020840182612512565b5060408101516123316040840182612512565b5060608101516123446060840182612494565b5060808101516123586101a0840182612494565b5060a081015161236c6102e0840182611c99565b5060c0810151612380610360840182611c8a565b5060e0810151612394610380840182612512565b506101008101516123a96103a0840182611c8a565b506101208101516123be6103c0840182612512565b506101408101516123d36103e0840182612512565b506101608101516122fa610400840182612512565b80516060808452600091908401906124008282611dac565b9150506020830151848203602086015261241a8282611d56565b9150506040830151610fc06040860182612512565b805161243b8382612512565b5060208101516122fa6020840182611f0a565b805160009060608401906124628582611c8a565b506020830151848203602086015261247a8282611f13565b915050604083015184820360408601526122a78282611ceb565b80516124a08382612512565b5060208101516124b36020840182612512565b5060408101516124c66040840182612512565b5060608101516124d96060840182612512565b5060808101516124ec6080840182612512565b5060a08101516124ff60a0840182612512565b5060c08101516122fa60c0840182611eb6565b611c9381612791565b60006104978284611f4b565b602080825281016104978184611e57565b602081016101b08284611f01565b604081016125548285611f0a565b6104976020830184611f0a565b606080825281016125728186611f13565b905081810360208301526125868185611e57565b90506108aa6040830184611f01565b602080825281016101b081611f7a565b602080825281016101b081611fdd565b602080825281016101b081612040565b602080825281016101b0816120c9565b602080825281016101b08161212c565b602080825281016101b08161218f565b602080825281016101b0816121f2565b6020808252810161049781846122b0565b6060808252810161257281866122b0565b6060808252810161263881866122b0565b90506126476020830185612512565b6108aa6040830184611f0a565b6080808252810161266581876122b0565b90506126746020830186612512565b6126816040830185612512565b6122a76060830184611f0a565b604081016101b0828461242f565b60405181810167ffffffffffffffff811182821017156126be576126be6127d3565b604052919050565b600067ffffffffffffffff8211156126e0576126e06127d3565b5060200290565b600067ffffffffffffffff821115612701576127016127d3565b5060209081020190565b600067ffffffffffffffff821115612725576127256127d3565b506020601f91909101601f19160190565b90565b60200190565b50600490565b5190565b50600290565b919050565b90815260200190565b60006101b08261276d565b151590565b73ffffffffffffffffffffffffffffffffffffffff1690565b65ffffffffffff1690565b60ff1690565b82818337506000910152565b60005b838110156127be5781810151838201526020016127a6565b838111156127cd576000848401525b50505050565bfe5b601f01601f191690565b6127e88161275d565b81146127f357600080fd5b50565b6127e881612768565b6127e881612736565b6127e881612786565b6127e88161279156fea264697066735822122071b518b1bf5c14cea086472c63c95176d422b65ece3770103ed1d4e154144ade64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063215158ec146100515780632934b2e41461007a5780634e42d6e01461009a578063bd413823146100bc575b600080fd5b61006461005f3660046119ed565b6100de565b6040516100719190612527565b60405180910390f35b61008d610088366004611ba2565b6101b6565b6040516100719190612538565b6100ad6100a8366004611b4b565b61049e565b60405161007193929190612616565b6100cf6100ca366004611a3e565b6105b7565b60405161007193929190612561565b60606000836000815181106100ef57fe5b602002602001015190506000816040015160018151811061010c57fe5b602002602001015160200151826040015160008151811061012957fe5b602002602001015160200151019050808560008151811061014657fe5b6020026020010151604001518560ff168151811061016057fe5b6020026020010151602001818152505060008560008151811061017f57fe5b602002602001015160400151851960ff168151811061019a57fe5b6020026020010151602001818152505084925050505b92915050565b6000816002146101e15760405162461bcd60e51b81526004016101d8906125d5565b60405180910390fd5b60006101f0846040015161061d565b90506000610201866020015161062e565b90506000610212866020015161062e565b9050600083600381111561022257fe5b141561027d5761023a8260800151826080015161064a565b6102565760405162461bcd60e51b81526004016101d8906125f5565b8551875161026f919061026a9060006100de565b6106a3565b61027857600080fd5b61048f565b600183600381111561028b57fe5b14156102f4576102a38260800151826080015161064a565b6102bf5760405162461bcd60e51b81526004016101d8906125c5565b80518251146102e05760405162461bcd60e51b81526004016101d8906125a5565b8551875161026f919061026a9060016100de565b600283600381111561030257fe5b14156103975761031a8260800151826080015161064a565b6103365760405162461bcd60e51b81526004016101d8906125e5565b806020015182602001511461035d5760405162461bcd60e51b81526004016101d890612595565b8060400151604051602001610372919061268e565b6040516020818303038152906040528051906020012082600001511461025657600080fd5b60038360038111156103a557fe5b141561048f5780606001516040516020016103c0919061268e565b604051602081830303815290604052805190602001208260200151146103e557600080fd5b855187516103f9919061026a9060016100de565b61040257600080fd5b600061041e8260400151602001518360600151602001516106dd565b905060008061044885608001518b60000151866040015160000151876060015160000151876105b7565b925050915061045b82856080015161064a565b6104775760405162461bcd60e51b81526004016101d8906125b5565b886060015115158115151461048b57600080fd5b5050505b600193505050505b9392505050565b6104a6610a52565b85516060906000906104be90825b6020020151610710565b806104d1575087516104d19060016104b4565b156104e4575086915085905060016105ac565b6104ed86610765565b156105045787515160ff6003198801166040909101525b61050d85610765565b156105245787515160ff6003198701166040909101525b61052d86610783565b156105455761054288600988036000876107a1565b97505b61054e85610783565b156105665761056388600988036001876107a1565b97505b61056f866108b2565b156105845761058188876000876108be565b97505b61058d856108b2565b156105a25761059f88866001876108be565b97505b5086915085905060015b955095509592505050565b606080600080888060200190518101906105d19190611b16565b905060008060006105e5848c8c8c8c61049e565b925092509250826040516020016105fc9190612605565b60408051808303601f190181529190529c919b509950975050505050505050565b60006003808316908111156101b057fe5b610636610a6a565b818060200190518101906101b09190611ae1565b60008160405160200161065d919061251b565b6040516020818303038152906040528051906020012083604051602001610684919061251b565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016106b69190612527565b60405160208183030381529060405280519060200120836040516020016106849190612527565b600082826040516020016106f2929190612546565b60405160208183030381529060405280519060200120905092915050565b60006001815b83515160ff8216101561075e57600084600001518260ff168151811061073857fe5b6020026020010151608001516000015160ff16111561075657600091505b600101610716565b5092915050565b600060048260ff16101580156101b0575050600860ff909116111590565b600060098260ff16101580156101b0575050600d60ff909116111590565b6107a9610a52565b845160009060ff8516600281106107bc57fe5b60200201519050600181602001518660ff16815181106107d857fe5b6020026020010151604001901515908115158152505080602001518560ff168151811061080157fe5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663ba96c4b187868460400151876040518563ffffffff1660e01b815260040161084f9493929190612654565b60006040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a39190810190611b16565b9550859150505b949350505050565b600460ff821610919050565b6108c6610a52565b60006108e886600001518560ff16600281106108de57fe5b6020020151610a24565b905060006109038760000151861960ff16600281106108de57fe5b60808301515190915060ff1661091d5786925050506108aa565b816080015160c001518660ff166004811061093457fe5b602002015160ff1661094a5786925050506108aa565b6001826080015160c001518760ff166004811061096357fe5b60200201805160ff9290038216905260a08301519087166004811061098457fe5b602002015173ffffffffffffffffffffffffffffffffffffffff16636a9d22628887876040518463ffffffff1660e01b81526004016109c593929190612627565b60006040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a199190810190611b16565b979650505050505050565b610a2c610aa3565b8160000151826040015160ff1681518110610a4357fe5b60200260200101519050919050565b6040518060200160405280610a65610b1c565b905290565b6040805160a08101825260008082526020820152908101610a89610b49565b8152602001610a96610b49565b8152602001606081525090565b60405180610180016040528060008152602001600060ff168152602001600060ff168152602001610ad2610b60565b8152602001610adf610b60565b8152602001610aec610b9a565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b60405180604001604052806002905b610b33610bb8565b815260200190600190039081610b2b5790505090565b604080518082019091526000808252602082015290565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260c08101610a655b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806060815260200160608152602001600060ff1681525090565b6000610bef610bea846126c6565b61269c565b90508082856020860285011115610c0557600080fd5b60005b85811015610c2f57610c1a8783610ff9565b83526020928301929190910190600101610c08565b5050509392505050565b6000610c47610bea846126c6565b90508082856020860285011115610c5d57600080fd5b60005b85811015610c2f57610c728783611004565b83526020928301929190910190600101610c60565b6000610c95610bea846126e7565b8381529050602081018260005b85811015610c2f5781358501610cb888826111e9565b8452506020928301929190910190600101610ca2565b6000610cdc610bea846126e7565b83815290506020810182606085028101861015610cf857600080fd5b60005b85811015610c2f57610d0d878361138c565b835260209092019160609190910190600101610cfb565b6000610d32610bea846126e7565b83815290506020810182606085028101861015610d4e57600080fd5b60005b85811015610c2f57610d6387836113e3565b835260209092019160609190910190600101610d51565b6000610d88610bea846126e7565b8381529050602081018261042085028101861015610da557600080fd5b60005b85811015610c2f57610dba8783611430565b83526020909201916104209190910190600101610da8565b6000610de0610bea846126e7565b8381529050602081018261042085028101861015610dfd57600080fd5b60005b85811015610c2f57610e128783611547565b83526020909201916104209190910190600101610e00565b6000610e38610bea846126c6565b9050808260005b85811015610c2f5781358501610e558882611651565b8452506020928301929190910190600101610e3f565b6000610e79610bea846126c6565b9050808260005b85811015610c2f5781518501610e9688826116ce565b8452506020928301929190910190600101610e80565b6000610eba610bea846126e7565b8381529050602081018260005b85811015610c2f5781358501610edd8882611787565b8452506020928301929190910190600101610ec7565b6000610f01610bea846126c6565b90508082856020860285011115610f1757600080fd5b60005b85811015610c2f57610f2c87836119d7565b83526020928301929190910190600101610f1a565b6000610f4f610bea846126c6565b90508082856020860285011115610f6557600080fd5b60005b85811015610c2f57610f7a87836119e2565b83526020928301929190910190600101610f68565b6000610f9d610bea8461270b565b905082815260208101848484011115610fb557600080fd5b610fc0848285612797565b509392505050565b6000610fd6610bea8461270b565b905082815260208101848484011115610fee57600080fd5b610fc08482856127a3565b80356101b0816127df565b80516101b0816127df565b600082601f83011261101f578081fd5b60046108aa848285610bdc565b600082601f83011261103c578081fd5b60046108aa848285610c39565b600082601f830112611059578081fd5b81356108aa848260208601610c87565b600082601f830112611079578081fd5b81356108aa848260208601610cce565b600082601f830112611099578081fd5b81516108aa848260208601610d24565b600082601f8301126110b9578081fd5b81356108aa848260208601610d7a565b600082601f8301126110d9578081fd5b81516108aa848260208601610dd2565b600082601f8301126110f9578081fd5b60026108aa848285610e2a565b600082601f830112611116578081fd5b60026108aa848285610e6b565b600082601f830112611133578081fd5b81356108aa848260208601610eac565b600082601f830112611153578081fd5b60046108aa848285610ef3565b600082601f830112611170578081fd5b60046108aa848285610f41565b80356101b0816127f6565b80516101b0816127f6565b80356101b0816127ff565b80516101b0816127ff565b600082601f8301126111b9578081fd5b81356108aa848260208601610f8f565b600082601f8301126111d9578081fd5b81516108aa848260208601610fc8565b6000608082840312156111fa578081fd5b611204608061269c565b905060006112128484611193565b81830152602061122485828601611193565b908301526040611236858583016119d7565b90830152606083013567ffffffffffffffff811115611253578182fd5b61125f858286016111a9565b6060840152505092915050565b600060e0828403121561127d578081fd5b61128760a061269c565b90506000611295848461119e565b8183015260206112a78582860161119e565b9083015260406112b98585830161174c565b9083015260806112cb8585830161174c565b606084015260c084015167ffffffffffffffff8111156112e9578283fd5b6112f5868287016111c9565b8285015250505092915050565b600060208284031215611313578081fd5b61131d602061269c565b9050813567ffffffffffffffff81111561133657600080fd5b611342848285016110e9565b82525092915050565b60006020828403121561135c578081fd5b611366602061269c565b825190915067ffffffffffffffff81111561138057600080fd5b61134284828501611106565b60006060828403121561139d578081fd5b6113a7606061269c565b905060006113b58484611193565b9082015260206113c784848301610ff9565b9082015260406113d98484830161117d565b9082015292915050565b6000606082840312156113f4578081fd5b6113fe606061269c565b9050600061140c848461119e565b90820152602061141e84848301611004565b9082015260406113d984848301611188565b60006104208284031215611442578081fd5b61144d61018061269c565b9050600061145b8484611193565b90820152602061146d848483016119d7565b90820152604061147f848483016119d7565b90820152606061149184848301611811565b908201526101a06114a484848301611811565b6080830152506102e06114b98482850161100f565b60a0830152506103606114ce84828501610ff9565b60c0830152506103806114e3848285016119d7565b60e0830152506103a06114f884828501610ff9565b610100830152506103c061150e848285016119d7565b610120830152506103e0611524848285016119d7565b6101408301525061040061153a848285016119d7565b6101608301525092915050565b60006104208284031215611559578081fd5b61156461018061269c565b90506000611572848461119e565b908201526020611584848483016119e2565b908201526040611596848483016119e2565b9082015260606115a8848483016118a7565b908201526101a06115bb848483016118a7565b6080830152506102e06115d08482850161102c565b60a0830152506103606115e584828501611004565b60c0830152506103806115fa848285016119e2565b60e0830152506103a061160f84828501611004565b610100830152506103c0611625848285016119e2565b610120830152506103e061163b848285016119e2565b6101408301525061040061153a848285016119e2565b600060608284031215611662578081fd5b61166c606061269c565b9050813567ffffffffffffffff81111561168557600080fd5b611691848285016110a9565b825250602082013567ffffffffffffffff8111156116ae57600080fd5b6116ba84828501611069565b60208301525060406113d9848285016119d7565b6000606082840312156116df578081fd5b6116e9606061269c565b825190915067ffffffffffffffff81111561170357600080fd5b61170f848285016110c9565b825250602082015167ffffffffffffffff81111561172c57600080fd5b61173884828501611089565b60208301525060406113d9848285016119e2565b60006040828403121561175d578081fd5b611767604061269c565b9050600061177584846119e2565b9082015260206113d98484830161119e565b600060608284031215611798578081fd5b6117a2606061269c565b905060006117b08484610ff9565b81830152602083013567ffffffffffffffff8111156117cd578182fd5b6117d9858286016111a9565b602084015250604083013567ffffffffffffffff8111156117f8578182fd5b61180485828601611049565b6040840152505092915050565b60006101408284031215611823578081fd5b61182d60e061269c565b9050600061183b84846119d7565b90820152602061184d848483016119d7565b90820152604061185f848483016119d7565b908201526060611871848483016119d7565b908201526080611883848483016119d7565b9082015260a0611895848483016119d7565b9082015260c06113d984848301611143565b600061014082840312156118b9578081fd5b6118c360e061269c565b905060006118d184846119e2565b9082015260206118e3848483016119e2565b9082015260406118f5848483016119e2565b908201526060611907848483016119e2565b908201526080611919848483016119e2565b9082015260a061192b848483016119e2565b9082015260c06113d984848301611160565b60006080828403121561194e578081fd5b611958608061269c565b9050813567ffffffffffffffff81111561197157600080fd5b61197d84828501611123565b825250602082013567ffffffffffffffff81111561199a57600080fd5b6119a6848285016111a9565b60208301525060406119ba848285016119cc565b9082015260606113d98484830161117d565b80356101b081612808565b80356101b081612811565b80516101b081612811565b600080604083850312156119ff578182fd5b8183013567ffffffffffffffff811115611a17578283fd5b611a2385828601611123565b9250506020611a34858286016119d7565b9150509250929050565b600080600080600060a08688031215611a55578081fd5b8086013567ffffffffffffffff811115611a6d578182fd5b611a79888289016111a9565b955050602086013567ffffffffffffffff811115611a95578182fd5b611aa188828901611123565b9450506040611ab2888289016119d7565b9350506060611ac3888289016119d7565b9250506080611ad488828901611193565b9150509295509295909350565b600060208284031215611af2578081fd5b8082015167ffffffffffffffff811115611b0a578182fd5b6108aa8482850161126c565b600060208284031215611b27578081fd5b8082015167ffffffffffffffff811115611b3f578182fd5b6108aa8482850161134b565b600080600080600060a08688031215611b62578283fd5b8286013567ffffffffffffffff811115611b7a578384fd5b611b8688828901611302565b955050602086013567ffffffffffffffff811115611a95578384fd5b600080600060608486031215611bb6578081fd5b8084013567ffffffffffffffff811115611bce578182fd5b611bda8682870161193d565b935050602084013567ffffffffffffffff811115611bf6578182fd5b611c028682870161193d565b9250506040611c1386828701611193565b9150509250925092565b6000611c298383611c8a565b505060200190565b60006104978383612255565b6000611c4983836122c8565b505060600190565b6000611c5d83836122ff565b50506104200190565b600061049783836123e8565b6000610497838361244e565b6000611c298383612512565b611c938161275d565b82525050565b611ca28161273f565b611cac818461274f565b9250611cb782612736565b60005b82811015611ce4578151611cce8682611c1d565b955050611cda82612739565b9150600101611cba565b5050505050565b6000611cf682612745565b611d008185612754565b935083602082028501611d1285612739565b845b84811015611d4a5783830388528151611d2d8482611c31565b935050611d3982612739565b602098909801979150600101611d14565b50909695505050505050565b6000611d6182612745565b611d6b8185612754565b9350611d7683612739565b825b82811015611da2578151611d8c8782611c3d565b965050611d9882612739565b9150600101611d78565b5093949350505050565b6000611db782612745565b611dc18185612754565b9350611dcc83612739565b825b82811015611da2578151611de28782611c51565b965050611dee82612739565b9150600101611dce565b6000611e0382612749565b611e0d818561274f565b935083602082028501611e1f85612736565b845b84811015611d4a5783830388528151611e3a8482611c66565b935050611e4682612739565b602098909801979150600101611e21565b6000611e6282612745565b611e6c8185612754565b935083602082028501611e7e85612739565b845b84811015611d4a5783830388528151611e998482611c72565b935050611ea582612739565b602098909801979150600101611e80565b611ebf8161273f565b611ec9818461274f565b9250611ed482612736565b60005b82811015611ce4578151611eeb8682611c7e565b955050611ef782612739565b9150600101611ed7565b611c9381612768565b611c9381612736565b6000611f1e82612745565b611f288185612754565b9350611f388185602086016127a3565b611f41816127d5565b9093019392505050565b6000611f5682612745565b611f60818561274f565b9350611f708185602086016127a3565b9290920192915050565b6000611f87602e83612754565b7f43616e6e6f74206d75746174652042277320707265436f6d6d697420696e205b918101919091527f412072657665616c5d206d6f76650000000000000000000000000000000000006020820152604001919050565b6000611fea603283612754565b7f43616e6e6f74206d75746174652041277320707265436f6d6d697420696e205b918101919091527f4220636f6d6d69746d656e745d206d6f766500000000000000000000000000006020820152604001919050565b600061204d604683612754565b7f4e6577207374617465206d75737420626520636f6d7075746564206261736564918101919091527f206f6e20707265436f6d6d6974206d6f76657320696e205b422072657665616c60208201527f5d206d6f766500000000000000000000000000000000000000000000000000006040820152606001919050565b60006120d6603383612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4220636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b6000612139603683612754565b7f4f6e6c792074776f207061727469636970616e7420636f6d6d69742f72657665918101919091527f616c2067616d65732061726520737570706f72746564000000000000000000006020820152604001919050565b600061219c602f83612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b412072657665616c5d206d6f766500000000000000000000000000000000006020820152604001919050565b60006121ff603383612754565b7f43616e6e6f74206d7574617465207468652067616d6520737461746520696e20918101919091527f5b4120636f6d6d69746d656e745d206d6f7665000000000000000000000000006020820152604001919050565b805160009060808401906122698582611f0a565b50602083015161227c6020860182611f0a565b50604083015161228f6040860182612512565b50606083015184820360608601526122a78282611f13565b95945050505050565b80516020808452600091908401906122a78282611df8565b80516122d48382611f0a565b5060208101516122e76020840182611c8a565b5060408101516122fa6040840182611f01565b505050565b805161230b8382611f0a565b50602081015161231e6020840182612512565b5060408101516123316040840182612512565b5060608101516123446060840182612494565b5060808101516123586101a0840182612494565b5060a081015161236c6102e0840182611c99565b5060c0810151612380610360840182611c8a565b5060e0810151612394610380840182612512565b506101008101516123a96103a0840182611c8a565b506101208101516123be6103c0840182612512565b506101408101516123d36103e0840182612512565b506101608101516122fa610400840182612512565b80516060808452600091908401906124008282611dac565b9150506020830151848203602086015261241a8282611d56565b9150506040830151610fc06040860182612512565b805161243b8382612512565b5060208101516122fa6020840182611f0a565b805160009060608401906124628582611c8a565b506020830151848203602086015261247a8282611f13565b915050604083015184820360408601526122a78282611ceb565b80516124a08382612512565b5060208101516124b36020840182612512565b5060408101516124c66040840182612512565b5060608101516124d96060840182612512565b5060808101516124ec6080840182612512565b5060a08101516124ff60a0840182612512565b5060c08101516122fa60c0840182611eb6565b611c9381612791565b60006104978284611f4b565b602080825281016104978184611e57565b602081016101b08284611f01565b604081016125548285611f0a565b6104976020830184611f0a565b606080825281016125728186611f13565b905081810360208301526125868185611e57565b90506108aa6040830184611f01565b602080825281016101b081611f7a565b602080825281016101b081611fdd565b602080825281016101b081612040565b602080825281016101b0816120c9565b602080825281016101b08161212c565b602080825281016101b08161218f565b602080825281016101b0816121f2565b6020808252810161049781846122b0565b6060808252810161257281866122b0565b6060808252810161263881866122b0565b90506126476020830185612512565b6108aa6040830184611f0a565b6080808252810161266581876122b0565b90506126746020830186612512565b6126816040830185612512565b6122a76060830184611f0a565b604081016101b0828461242f565b60405181810167ffffffffffffffff811182821017156126be576126be6127d3565b604052919050565b600067ffffffffffffffff8211156126e0576126e06127d3565b5060200290565b600067ffffffffffffffff821115612701576127016127d3565b5060209081020190565b600067ffffffffffffffff821115612725576127256127d3565b506020601f91909101601f19160190565b90565b60200190565b50600490565b5190565b50600290565b919050565b90815260200190565b60006101b08261276d565b151590565b73ffffffffffffffffffffffffffffffffffffffff1690565b65ffffffffffff1690565b60ff1690565b82818337506000910152565b60005b838110156127be5781810151838201526020016127a6565b838111156127cd576000848401525b50505050565bfe5b601f01601f191690565b6127e88161275d565b81146127f357600080fd5b50565b6127e881612768565b6127e881612736565b6127e881612786565b6127e88161279156fea264697066735822122071b518b1bf5c14cea086472c63c95176d422b65ece3770103ed1d4e154144ade64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "updateOutcomeFavourPlayer((address,bytes,(bytes32,uint256,uint8,bytes)[])[],uint8)": {
        "details": "Take an old outcome and update it to favour a given player       Assumes the outcome allocations can be indexed by the playerIndex",
        "params": {
          "outcome": "An outcome object to be rebalanced",
          "playerIndex": "Zero based index of the player to be assigned the favoured outcome"
        },
        "returns": {
          "_0": "The outcome resulting in a rebalance to the given player"
        }
      },
      "validTransition(((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),((address,bytes,(bytes32,uint256,uint8,bytes)[])[],bytes,uint48,bool),uint256)": {
        "details": "Override of IForceMove validTransition for the randomness protocol"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}